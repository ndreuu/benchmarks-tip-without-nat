
(set-logic HORN)
(define-fun zero_100 () Int 0)
(define-fun succ_98 ((x Int)) Int (+ x 1))
(declare-fun diseqInt (Int Int) Bool)
(declare-fun p_285 (Int Int) Bool)
(declare-fun iszero_98 (Int) Bool)
(declare-fun issucc_98 (Int) Bool)
(assert (forall ((x_46281 Int))
	(p_285 x_46281 (succ_98 x_46281))))
(assert (iszero_98 zero_100))
(assert (forall ((x_46283 Int))
	(issucc_98 (succ_98 x_46283))))
(assert (forall ((x_46284 Int))
	(diseqInt zero_100 (succ_98 x_46284))))
(assert (forall ((x_46285 Int))
	(diseqInt (succ_98 x_46285) zero_100)))
(assert (forall ((x_46286 Int) (x_46287 Int))
	(=> (diseqInt x_46286 x_46287) (diseqInt (succ_98 x_46286) (succ_98 x_46287)))))
(declare-datatypes ((Bin_12 0)) (((One_13) (ZeroAnd_12 (projZeroAnd_24 Bin_12)) (OneAnd_12 (projOneAnd_24 Bin_12)))))
(declare-fun diseqBin_12 (Bin_12 Bin_12) Bool)
(declare-fun projZeroAnd_25 (Bin_12 Bin_12) Bool)
(declare-fun projOneAnd_25 (Bin_12 Bin_12) Bool)
(declare-fun isOne_12 (Bin_12) Bool)
(declare-fun isZeroAnd_12 (Bin_12) Bool)
(declare-fun isOneAnd_12 (Bin_12) Bool)
(assert (forall ((x_46289 Bin_12))
	(projZeroAnd_25 x_46289 (ZeroAnd_12 x_46289))))
(assert (forall ((x_46291 Bin_12))
	(projOneAnd_25 x_46291 (OneAnd_12 x_46291))))
(assert (isOne_12 One_13))
(assert (forall ((x_46293 Bin_12))
	(isZeroAnd_12 (ZeroAnd_12 x_46293))))
(assert (forall ((x_46294 Bin_12))
	(isOneAnd_12 (OneAnd_12 x_46294))))
(assert (forall ((x_46295 Bin_12))
	(diseqBin_12 One_13 (ZeroAnd_12 x_46295))))
(assert (forall ((x_46296 Bin_12))
	(diseqBin_12 One_13 (OneAnd_12 x_46296))))
(assert (forall ((x_46297 Bin_12))
	(diseqBin_12 (ZeroAnd_12 x_46297) One_13)))
(assert (forall ((x_46298 Bin_12))
	(diseqBin_12 (OneAnd_12 x_46298) One_13)))
(assert (forall ((x_46299 Bin_12) (x_46300 Bin_12))
	(diseqBin_12 (ZeroAnd_12 x_46299) (OneAnd_12 x_46300))))
(assert (forall ((x_46301 Bin_12) (x_46302 Bin_12))
	(diseqBin_12 (OneAnd_12 x_46301) (ZeroAnd_12 x_46302))))
(assert (forall ((x_46303 Bin_12) (x_46304 Bin_12))
	(=> (diseqBin_12 x_46303 x_46304) (diseqBin_12 (ZeroAnd_12 x_46303) (ZeroAnd_12 x_46304)))))
(assert (forall ((x_46305 Bin_12) (x_46306 Bin_12))
	(=> (diseqBin_12 x_46305 x_46306) (diseqBin_12 (OneAnd_12 x_46305) (OneAnd_12 x_46306)))))
(declare-fun s_351 (Bin_12 Bin_12) Bool)
(assert (forall ((x_46235 Bin_12) (ys_150 Bin_12))
	(=> (s_351 x_46235 ys_150) (s_351 (ZeroAnd_12 x_46235) (OneAnd_12 ys_150)))))
(assert (forall ((xs_491 Bin_12))
	(s_351 (OneAnd_12 xs_491) (ZeroAnd_12 xs_491))))
(assert (s_351 (ZeroAnd_12 One_13) One_13))
(declare-fun plus_101 (Bin_12 Bin_12 Bin_12) Bool)
(assert (forall ((x_46239 Bin_12) (x_46240 Bin_12) (ys_151 Bin_12) (x_46226 Bin_12))
	(=> (and (plus_101 x_46239 x_46226 ys_151) (s_351 x_46240 x_46239)) (plus_101 (ZeroAnd_12 x_46240) (OneAnd_12 x_46226) (OneAnd_12 ys_151)))))
(assert (forall ((x_46242 Bin_12) (zs_52 Bin_12) (x_46226 Bin_12))
	(=> (plus_101 x_46242 x_46226 zs_52) (plus_101 (OneAnd_12 x_46242) (OneAnd_12 x_46226) (ZeroAnd_12 zs_52)))))
(assert (forall ((x_46243 Bin_12) (x_46226 Bin_12))
	(=> (s_351 x_46243 (OneAnd_12 x_46226)) (plus_101 x_46243 (OneAnd_12 x_46226) One_13))))
(assert (forall ((x_46246 Bin_12) (xs_492 Bin_12) (z_1485 Bin_12))
	(=> (plus_101 x_46246 z_1485 xs_492) (plus_101 (OneAnd_12 x_46246) (ZeroAnd_12 z_1485) (OneAnd_12 xs_492)))))
(assert (forall ((x_46248 Bin_12) (ys_152 Bin_12) (z_1485 Bin_12))
	(=> (plus_101 x_46248 z_1485 ys_152) (plus_101 (ZeroAnd_12 x_46248) (ZeroAnd_12 z_1485) (ZeroAnd_12 ys_152)))))
(assert (forall ((x_46249 Bin_12) (z_1485 Bin_12))
	(=> (s_351 x_46249 (ZeroAnd_12 z_1485)) (plus_101 x_46249 (ZeroAnd_12 z_1485) One_13))))
(assert (forall ((x_46251 Bin_12) (y_1648 Bin_12))
	(=> (s_351 x_46251 y_1648) (plus_101 x_46251 One_13 y_1648))))
(declare-fun plus_102 (Int Int Int) Bool)
(assert (forall ((x_46254 Int) (z_1486 Int) (y_1649 Int))
	(=> (plus_102 x_46254 z_1486 y_1649) (plus_102 (succ_98 x_46254) (succ_98 z_1486) y_1649))))
(assert (forall ((x_46255 Int))
	(plus_102 x_46255 zero_100 x_46255)))
(declare-fun toNat_5 (Int Bin_12) Bool)
(assert (forall ((x_46256 Int) (x_46257 Int) (x_46258 Int) (x_46259 Int) (ys_153 Bin_12))
	(=> (and (toNat_5 x_46257 ys_153) (plus_102 x_46258 (succ_98 zero_100) x_46257) (toNat_5 x_46259 ys_153) (plus_102 x_46256 x_46258 x_46259)) (toNat_5 x_46256 (OneAnd_12 ys_153)))))
(assert (forall ((x_46261 Int) (x_46262 Int) (x_46263 Int) (xs_493 Bin_12))
	(=> (and (toNat_5 x_46262 xs_493) (toNat_5 x_46263 xs_493) (plus_102 x_46261 x_46262 x_46263)) (toNat_5 x_46261 (ZeroAnd_12 xs_493)))))
(assert (toNat_5 (succ_98 zero_100) One_13))
(assert (forall ((x_46266 Bin_12) (x_46267 Int) (x_46268 Int) (x_46269 Int) (x_46270 Int) (x_46229 Bin_12) (y_1650 Bin_12))
	(=> (and true (diseqInt x_46267 x_46270) (plus_101 x_46266 x_46229 y_1650) (toNat_5 x_46267 x_46266) (toNat_5 x_46268 x_46229) (toNat_5 x_46269 y_1650) (plus_102 x_46270 x_46268 x_46269)) false)))
(assert (forall ((x_46271 Int) (x_46272 Int) (x_46273 Int) (x_46274 Int) (x_46230 Int) (y_1651 Int) (z_1487 Int))
	(=> (and true (diseqInt x_46272 x_46274) (plus_102 x_46271 y_1651 z_1487) (plus_102 x_46272 x_46230 x_46271) (plus_102 x_46273 x_46230 y_1651) (plus_102 x_46274 x_46273 z_1487)) false)))
(assert (forall ((x_46275 Int) (x_46276 Int) (x_46231 Int) (y_1652 Int))
	(=> (and true (diseqInt x_46275 x_46276) (plus_102 x_46275 x_46231 y_1652) (plus_102 x_46276 y_1652 x_46231)) false)))
(assert (forall ((x_46277 Int) (x_46232 Int))
	(=> (and true (diseqInt x_46277 x_46232) (plus_102 x_46277 x_46232 zero_100)) false)))
(assert (forall ((x_46278 Int) (x_46233 Int))
	(=> (and true (diseqInt x_46278 x_46233) (plus_102 x_46278 zero_100 x_46233)) false)))
(check-sat)
