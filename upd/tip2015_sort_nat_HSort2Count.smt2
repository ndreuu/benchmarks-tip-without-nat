
(set-logic HORN)
(define-fun zero_1 () Int 0)
(define-fun succ_1 ((x Int)) Int (+ x 1))
(declare-datatypes ((Bool_79 0)) (((false_79) (true_79))))
(declare-fun diseqBool_34 (Bool_79 Bool_79) Bool)
(declare-fun isfalse_34 (Bool_79) Bool)
(declare-fun istrue_34 (Bool_79) Bool)
(assert (isfalse_34 false_79))
(assert (istrue_34 true_79))
(assert (diseqBool_34 false_79 true_79))
(assert (diseqBool_34 true_79 false_79))
(declare-fun and_79 (Bool_79 Bool_79 Bool_79) Bool)
(declare-fun or_79 (Bool_79 Bool_79 Bool_79) Bool)
(declare-fun hence_79 (Bool_79 Bool_79 Bool_79) Bool)
(declare-fun not_79 (Bool_79 Bool_79) Bool)
(assert (and_79 false_79 false_79 false_79))
(assert (and_79 false_79 true_79 false_79))
(assert (and_79 false_79 false_79 true_79))
(assert (and_79 true_79 true_79 true_79))
(assert (or_79 false_79 false_79 false_79))
(assert (or_79 true_79 true_79 false_79))
(assert (or_79 true_79 false_79 true_79))
(assert (or_79 true_79 true_79 true_79))
(assert (hence_79 true_79 false_79 false_79))
(assert (hence_79 false_79 true_79 false_79))
(assert (hence_79 true_79 false_79 true_79))
(assert (hence_79 true_79 true_79 true_79))
(assert (not_79 true_79 false_79))
(assert (not_79 false_79 true_79))
(declare-fun diseqInt (Int Int) Bool)
(declare-fun p_3 (Int Int) Bool)
(declare-fun iszero_1 (Int) Bool)
(declare-fun issucc_1 (Int) Bool)
(assert (forall ((x_4174 Int))
	(p_3 x_4174 (succ_1 x_4174))))
(assert (iszero_1 zero_1))
(assert (forall ((x_4176 Int))
	(issucc_1 (succ_1 x_4176))))
(assert (forall ((x_4177 Int))
	(diseqInt zero_1 (succ_1 x_4177))))
(assert (forall ((x_4178 Int))
	(diseqInt (succ_1 x_4178) zero_1)))
(assert (forall ((x_4179 Int) (x_4180 Int))
	(=> (diseqInt x_4179 x_4180) (diseqInt (succ_1 x_4179) (succ_1 x_4180)))))
(declare-datatypes ((list_66 0)) (((nil_66) (cons_66 (head_132 Int) (tail_132 list_66)))))
(declare-fun diseqlist_66 (list_66 list_66) Bool)
(declare-fun head_133 (Int list_66) Bool)
(declare-fun tail_133 (list_66 list_66) Bool)
(declare-fun isnil_66 (list_66) Bool)
(declare-fun iscons_66 (list_66) Bool)
(assert (forall ((x_4182 Int) (x_4183 list_66))
	(head_133 x_4182 (cons_66 x_4182 x_4183))))
(assert (forall ((x_4182 Int) (x_4183 list_66))
	(tail_133 x_4183 (cons_66 x_4182 x_4183))))
(assert (isnil_66 nil_66))
(assert (forall ((x_4185 Int) (x_4186 list_66))
	(iscons_66 (cons_66 x_4185 x_4186))))
(assert (forall ((x_4187 Int) (x_4188 list_66))
	(diseqlist_66 nil_66 (cons_66 x_4187 x_4188))))
(assert (forall ((x_4189 Int) (x_4190 list_66))
	(diseqlist_66 (cons_66 x_4189 x_4190) nil_66)))
(assert (forall ((x_4191 Int) (x_4192 list_66) (x_4193 Int) (x_4194 list_66))
	(=> (diseqInt x_4191 x_4193) (diseqlist_66 (cons_66 x_4191 x_4192) (cons_66 x_4193 x_4194)))))
(assert (forall ((x_4191 Int) (x_4192 list_66) (x_4193 Int) (x_4194 list_66))
	(=> (diseqlist_66 x_4192 x_4194) (diseqlist_66 (cons_66 x_4191 x_4192) (cons_66 x_4193 x_4194)))))
(declare-datatypes ((Heap_0 0)) (((Node_1 (projNode_6 Heap_0) (projNode_7 Int) (projNode_8 Heap_0)) (Nil_67))))
(declare-fun diseqHeap_0 (Heap_0 Heap_0) Bool)
(declare-fun projNode_9 (Heap_0 Heap_0) Bool)
(declare-fun projNode_10 (Int Heap_0) Bool)
(declare-fun projNode_11 (Heap_0 Heap_0) Bool)
(declare-fun isNode_1 (Heap_0) Bool)
(declare-fun isNil_67 (Heap_0) Bool)
(assert (forall ((x_4195 Heap_0) (x_4196 Int) (x_4197 Heap_0))
	(projNode_9 x_4195 (Node_1 x_4195 x_4196 x_4197))))
(assert (forall ((x_4195 Heap_0) (x_4196 Int) (x_4197 Heap_0))
	(projNode_10 x_4196 (Node_1 x_4195 x_4196 x_4197))))
(assert (forall ((x_4195 Heap_0) (x_4196 Int) (x_4197 Heap_0))
	(projNode_11 x_4197 (Node_1 x_4195 x_4196 x_4197))))
(assert (forall ((x_4200 Heap_0) (x_4201 Int) (x_4202 Heap_0))
	(isNode_1 (Node_1 x_4200 x_4201 x_4202))))
(assert (isNil_67 Nil_67))
(assert (forall ((x_4203 Heap_0) (x_4204 Int) (x_4205 Heap_0))
	(diseqHeap_0 (Node_1 x_4203 x_4204 x_4205) Nil_67)))
(assert (forall ((x_4206 Heap_0) (x_4207 Int) (x_4208 Heap_0))
	(diseqHeap_0 Nil_67 (Node_1 x_4206 x_4207 x_4208))))
(assert (forall ((x_4209 Heap_0) (x_4210 Int) (x_4211 Heap_0) (x_4212 Heap_0) (x_4213 Int) (x_4214 Heap_0))
	(=> (diseqHeap_0 x_4209 x_4212) (diseqHeap_0 (Node_1 x_4209 x_4210 x_4211) (Node_1 x_4212 x_4213 x_4214)))))
(assert (forall ((x_4209 Heap_0) (x_4210 Int) (x_4211 Heap_0) (x_4212 Heap_0) (x_4213 Int) (x_4214 Heap_0))
	(=> (diseqInt x_4210 x_4213) (diseqHeap_0 (Node_1 x_4209 x_4210 x_4211) (Node_1 x_4212 x_4213 x_4214)))))
(assert (forall ((x_4209 Heap_0) (x_4210 Int) (x_4211 Heap_0) (x_4212 Heap_0) (x_4213 Int) (x_4214 Heap_0))
	(=> (diseqHeap_0 x_4211 x_4214) (diseqHeap_0 (Node_1 x_4209 x_4210 x_4211) (Node_1 x_4212 x_4213 x_4214)))))
(declare-fun plus_0 (Int Int Int) Bool)
(assert (forall ((x_4126 Int) (z_427 Int) (y_337 Int))
	(=> (plus_0 x_4126 z_427 y_337) (plus_0 (succ_1 x_4126) (succ_1 z_427) y_337))))
(assert (forall ((x_4127 Int))
	(plus_0 x_4127 zero_1 x_4127)))
(declare-fun leq_0 (Bool_79 Int Int) Bool)
(assert (forall ((x_4128 Bool_79) (x_4108 Int) (z_428 Int))
	(=> (leq_0 x_4128 z_428 x_4108) (leq_0 x_4128 (succ_1 z_428) (succ_1 x_4108)))))
(assert (forall ((z_428 Int))
	(leq_0 false_79 (succ_1 z_428) zero_1)))
(assert (forall ((y_338 Int))
	(leq_0 true_79 zero_1 y_338)))
(declare-fun hmerge_0 (Heap_0 Heap_0 Heap_0) Bool)
(assert (forall ((x_4132 Heap_0))
	(hmerge_0 x_4132 Nil_67 x_4132)))
(assert (forall ((z_429 Heap_0) (x_4110 Int) (x_4111 Heap_0))
	(hmerge_0 (Node_1 z_429 x_4110 x_4111) (Node_1 z_429 x_4110 x_4111) Nil_67)))
(assert (forall ((x_4136 Heap_0) (x_4112 Heap_0) (x_4113 Int) (x_4114 Heap_0) (z_429 Heap_0) (x_4110 Int) (x_4111 Heap_0))
	(=> (and (hmerge_0 x_4136 x_4111 (Node_1 x_4112 x_4113 x_4114)) (leq_0 true_79 x_4110 x_4113)) (hmerge_0 (Node_1 x_4136 x_4110 z_429) (Node_1 z_429 x_4110 x_4111) (Node_1 x_4112 x_4113 x_4114)))))
(assert (forall ((x_4139 Heap_0) (x_4112 Heap_0) (x_4113 Int) (x_4114 Heap_0) (z_429 Heap_0) (x_4110 Int) (x_4111 Heap_0))
	(=> (and (hmerge_0 x_4139 (Node_1 z_429 x_4110 x_4111) x_4114) (leq_0 false_79 x_4110 x_4113)) (hmerge_0 (Node_1 x_4139 x_4113 x_4112) (Node_1 z_429 x_4110 x_4111) (Node_1 x_4112 x_4113 x_4114)))))
(declare-fun toList_0 (list_66 Heap_0) Bool)
(assert (toList_0 nil_66 Nil_67))
(assert (forall ((x_4142 Heap_0) (x_4143 list_66) (q_0 Heap_0) (y_340 Int) (r_81 Heap_0))
	(=> (and (hmerge_0 x_4142 q_0 r_81) (toList_0 x_4143 x_4142)) (toList_0 (cons_66 y_340 x_4143) (Node_1 q_0 y_340 r_81)))))
(declare-fun hinsert_0 (Heap_0 Int Heap_0) Bool)
(assert (forall ((x_4144 Heap_0) (x_4116 Int) (y_341 Heap_0))
	(=> (hmerge_0 x_4144 (Node_1 Nil_67 x_4116 Nil_67) y_341) (hinsert_0 x_4144 x_4116 y_341))))
(declare-fun toHeap_0 (Heap_0 list_66) Bool)
(assert (forall ((x_4146 Heap_0) (x_4147 Heap_0) (y_342 Int) (xs_123 list_66))
	(=> (and (toHeap_0 x_4147 xs_123) (hinsert_0 x_4146 y_342 x_4147)) (toHeap_0 x_4146 (cons_66 y_342 xs_123)))))
(assert (toHeap_0 Nil_67 nil_66))
(declare-fun hsort_0 (list_66 list_66) Bool)
(assert (forall ((x_4150 list_66) (x_4151 Heap_0) (x_4118 list_66))
	(=> (and (toHeap_0 x_4151 x_4118) (toList_0 x_4150 x_4151)) (hsort_0 x_4150 x_4118))))
(declare-fun count_10 (Int Int list_66) Bool)
(assert (forall ((x_4153 Int) (x_4154 Int) (ys_30 list_66) (x_4119 Int))
	(=> (and (count_10 x_4154 x_4119 ys_30) (plus_0 x_4153 (succ_1 zero_1) x_4154)) (count_10 x_4153 x_4119 (cons_66 x_4119 ys_30)))))
(assert (forall ((x_4156 Int) (z_430 Int) (ys_30 list_66) (x_4119 Int))
	(=> (and (diseqInt x_4119 z_430) (count_10 x_4156 x_4119 ys_30)) (count_10 x_4156 x_4119 (cons_66 z_430 ys_30)))))
(assert (forall ((x_4119 Int))
	(count_10 zero_1 x_4119 nil_66)))
(assert (forall ((x_4159 Int) (x_4160 Int) (x_4161 Int) (x_4162 Int) (x_4120 Int) (y_344 Int) (z_431 Int))
	(=> (and true (diseqInt x_4160 x_4162) (plus_0 x_4159 y_344 z_431) (plus_0 x_4160 x_4120 x_4159) (plus_0 x_4161 x_4120 y_344) (plus_0 x_4162 x_4161 z_431)) false)))
(assert (forall ((x_4163 Int) (x_4164 Int) (x_4121 Int) (y_345 Int))
	(=> (and true (diseqInt x_4163 x_4164) (plus_0 x_4163 x_4121 y_345) (plus_0 x_4164 y_345 x_4121)) false)))
(assert (forall ((x_4165 Int) (x_4122 Int))
	(=> (and true (diseqInt x_4165 x_4122) (plus_0 x_4165 x_4122 zero_1)) false)))
(assert (forall ((x_4166 Int) (x_4123 Int))
	(=> (and true (diseqInt x_4166 x_4123) (plus_0 x_4166 zero_1 x_4123)) false)))
(assert (forall ((x_4167 list_66) (x_4168 Int) (x_4169 Int) (x_4124 Int) (xs_124 list_66))
	(=> (and true (diseqInt x_4168 x_4169) (hsort_0 x_4167 xs_124) (count_10 x_4168 x_4124 x_4167) (count_10 x_4169 x_4124 xs_124)) false)))
(check-sat)
