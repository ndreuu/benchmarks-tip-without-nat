
(set-logic HORN)
(declare-datatypes ((Bool_421 0)) (((false_421) (true_421))))
(declare-fun diseqBool_206 (Bool_421 Bool_421) Bool)
(declare-fun isfalse_206 (Bool_421) Bool)
(declare-fun istrue_206 (Bool_421) Bool)
(assert (isfalse_206 false_421))
(assert (istrue_206 true_421))
(assert (diseqBool_206 false_421 true_421))
(assert (diseqBool_206 true_421 false_421))
(declare-fun and_426 (Bool_421 Bool_421 Bool_421) Bool)
(declare-fun or_436 (Bool_421 Bool_421 Bool_421) Bool)
(declare-fun hence_421 (Bool_421 Bool_421 Bool_421) Bool)
(declare-fun not_426 (Bool_421 Bool_421) Bool)
(assert (and_426 false_421 false_421 false_421))
(assert (and_426 false_421 true_421 false_421))
(assert (and_426 false_421 false_421 true_421))
(assert (and_426 true_421 true_421 true_421))
(assert (or_436 false_421 false_421 false_421))
(assert (or_436 true_421 true_421 false_421))
(assert (or_436 true_421 false_421 true_421))
(assert (or_436 true_421 true_421 true_421))
(assert (hence_421 true_421 false_421 false_421))
(assert (hence_421 false_421 true_421 false_421))
(assert (hence_421 true_421 false_421 true_421))
(assert (hence_421 true_421 true_421 true_421))
(assert (not_426 true_421 false_421))
(assert (not_426 false_421 true_421))
(declare-datatypes ((T_28 0)) (((A_110) (B_114) (C_63))))
(declare-fun diseqT_26 (T_28 T_28) Bool)
(declare-fun isA_33 (T_28) Bool)
(declare-fun isB_33 (T_28) Bool)
(declare-fun isC_34 (T_28) Bool)
(assert (isA_33 A_110))
(assert (isB_33 B_114))
(assert (isC_34 C_63))
(assert (diseqT_26 A_110 B_114))
(assert (diseqT_26 A_110 C_63))
(assert (diseqT_26 B_114 A_110))
(assert (diseqT_26 C_63 A_110))
(assert (diseqT_26 B_114 C_63))
(assert (diseqT_26 C_63 B_114))
(declare-datatypes ((list_360 0)) (((nil_410) (cons_354 (head_708 T_28) (tail_714 list_360)))))
(declare-fun diseqlist_354 (list_360 list_360) Bool)
(declare-fun head_709 (T_28 list_360) Bool)
(declare-fun tail_715 (list_360 list_360) Bool)
(declare-fun isnil_410 (list_360) Bool)
(declare-fun iscons_354 (list_360) Bool)
(assert (forall ((x_108197 T_28) (x_108198 list_360))
	(head_709 x_108197 (cons_354 x_108197 x_108198))))
(assert (forall ((x_108197 T_28) (x_108198 list_360))
	(tail_715 x_108198 (cons_354 x_108197 x_108198))))
(assert (isnil_410 nil_410))
(assert (forall ((x_108200 T_28) (x_108201 list_360))
	(iscons_354 (cons_354 x_108200 x_108201))))
(assert (forall ((x_108202 T_28) (x_108203 list_360))
	(diseqlist_354 nil_410 (cons_354 x_108202 x_108203))))
(assert (forall ((x_108204 T_28) (x_108205 list_360))
	(diseqlist_354 (cons_354 x_108204 x_108205) nil_410)))
(assert (forall ((x_108206 T_28) (x_108207 list_360) (x_108208 T_28) (x_108209 list_360))
	(=> (diseqT_26 x_108206 x_108208) (diseqlist_354 (cons_354 x_108206 x_108207) (cons_354 x_108208 x_108209)))))
(assert (forall ((x_108206 T_28) (x_108207 list_360) (x_108208 T_28) (x_108209 list_360))
	(=> (diseqlist_354 x_108207 x_108209) (diseqlist_354 (cons_354 x_108206 x_108207) (cons_354 x_108208 x_108209)))))
(declare-datatypes ((R_597 0)) (((Nil_411) (Eps_80) (Atom_40 (projAtom_80 T_28)) (x_108147 (proj_272 R_597) (proj_273 R_597)) (x_108148 (proj_274 R_597) (proj_275 R_597)) (Star_40 (projStar_80 R_597)))))
(declare-fun diseqR_40 (R_597 R_597) Bool)
(declare-fun projAtom_81 (T_28 R_597) Bool)
(declare-fun proj_276 (R_597 R_597) Bool)
(declare-fun proj_277 (R_597 R_597) Bool)
(declare-fun proj_278 (R_597 R_597) Bool)
(declare-fun proj_279 (R_597 R_597) Bool)
(declare-fun projStar_81 (R_597 R_597) Bool)
(declare-fun isNil_411 (R_597) Bool)
(declare-fun isEps_40 (R_597) Bool)
(declare-fun isAtom_40 (R_597) Bool)
(declare-fun isx_83 (R_597) Bool)
(declare-fun isx_84 (R_597) Bool)
(declare-fun isStar_40 (R_597) Bool)
(assert (forall ((x_108212 T_28))
	(projAtom_81 x_108212 (Atom_40 x_108212))))
(assert (forall ((x_108214 R_597) (x_108215 R_597))
	(proj_276 x_108214 (x_108147 x_108214 x_108215))))
(assert (forall ((x_108214 R_597) (x_108215 R_597))
	(proj_277 x_108215 (x_108147 x_108214 x_108215))))
(assert (forall ((x_108217 R_597) (x_108218 R_597))
	(proj_278 x_108217 (x_108148 x_108217 x_108218))))
(assert (forall ((x_108217 R_597) (x_108218 R_597))
	(proj_279 x_108218 (x_108148 x_108217 x_108218))))
(assert (forall ((x_108220 R_597))
	(projStar_81 x_108220 (Star_40 x_108220))))
(assert (isNil_411 Nil_411))
(assert (isEps_40 Eps_80))
(assert (forall ((x_108222 T_28))
	(isAtom_40 (Atom_40 x_108222))))
(assert (forall ((x_108223 R_597) (x_108224 R_597))
	(isx_83 (x_108147 x_108223 x_108224))))
(assert (forall ((x_108225 R_597) (x_108226 R_597))
	(isx_84 (x_108148 x_108225 x_108226))))
(assert (forall ((x_108227 R_597))
	(isStar_40 (Star_40 x_108227))))
(assert (diseqR_40 Nil_411 Eps_80))
(assert (forall ((x_108228 T_28))
	(diseqR_40 Nil_411 (Atom_40 x_108228))))
(assert (forall ((x_108229 R_597) (x_108230 R_597))
	(diseqR_40 Nil_411 (x_108147 x_108229 x_108230))))
(assert (forall ((x_108231 R_597) (x_108232 R_597))
	(diseqR_40 Nil_411 (x_108148 x_108231 x_108232))))
(assert (forall ((x_108233 R_597))
	(diseqR_40 Nil_411 (Star_40 x_108233))))
(assert (diseqR_40 Eps_80 Nil_411))
(assert (forall ((x_108234 T_28))
	(diseqR_40 (Atom_40 x_108234) Nil_411)))
(assert (forall ((x_108235 R_597) (x_108236 R_597))
	(diseqR_40 (x_108147 x_108235 x_108236) Nil_411)))
(assert (forall ((x_108237 R_597) (x_108238 R_597))
	(diseqR_40 (x_108148 x_108237 x_108238) Nil_411)))
(assert (forall ((x_108239 R_597))
	(diseqR_40 (Star_40 x_108239) Nil_411)))
(assert (forall ((x_108240 T_28))
	(diseqR_40 Eps_80 (Atom_40 x_108240))))
(assert (forall ((x_108241 R_597) (x_108242 R_597))
	(diseqR_40 Eps_80 (x_108147 x_108241 x_108242))))
(assert (forall ((x_108243 R_597) (x_108244 R_597))
	(diseqR_40 Eps_80 (x_108148 x_108243 x_108244))))
(assert (forall ((x_108245 R_597))
	(diseqR_40 Eps_80 (Star_40 x_108245))))
(assert (forall ((x_108246 T_28))
	(diseqR_40 (Atom_40 x_108246) Eps_80)))
(assert (forall ((x_108247 R_597) (x_108248 R_597))
	(diseqR_40 (x_108147 x_108247 x_108248) Eps_80)))
(assert (forall ((x_108249 R_597) (x_108250 R_597))
	(diseqR_40 (x_108148 x_108249 x_108250) Eps_80)))
(assert (forall ((x_108251 R_597))
	(diseqR_40 (Star_40 x_108251) Eps_80)))
(assert (forall ((x_108252 T_28) (x_108253 R_597) (x_108254 R_597))
	(diseqR_40 (Atom_40 x_108252) (x_108147 x_108253 x_108254))))
(assert (forall ((x_108255 T_28) (x_108256 R_597) (x_108257 R_597))
	(diseqR_40 (Atom_40 x_108255) (x_108148 x_108256 x_108257))))
(assert (forall ((x_108258 T_28) (x_108259 R_597))
	(diseqR_40 (Atom_40 x_108258) (Star_40 x_108259))))
(assert (forall ((x_108260 R_597) (x_108261 R_597) (x_108262 T_28))
	(diseqR_40 (x_108147 x_108260 x_108261) (Atom_40 x_108262))))
(assert (forall ((x_108263 R_597) (x_108264 R_597) (x_108265 T_28))
	(diseqR_40 (x_108148 x_108263 x_108264) (Atom_40 x_108265))))
(assert (forall ((x_108266 R_597) (x_108267 T_28))
	(diseqR_40 (Star_40 x_108266) (Atom_40 x_108267))))
(assert (forall ((x_108268 R_597) (x_108269 R_597) (x_108270 R_597) (x_108271 R_597))
	(diseqR_40 (x_108147 x_108268 x_108269) (x_108148 x_108270 x_108271))))
(assert (forall ((x_108272 R_597) (x_108273 R_597) (x_108274 R_597))
	(diseqR_40 (x_108147 x_108272 x_108273) (Star_40 x_108274))))
(assert (forall ((x_108275 R_597) (x_108276 R_597) (x_108277 R_597) (x_108278 R_597))
	(diseqR_40 (x_108148 x_108275 x_108276) (x_108147 x_108277 x_108278))))
(assert (forall ((x_108279 R_597) (x_108280 R_597) (x_108281 R_597))
	(diseqR_40 (Star_40 x_108279) (x_108147 x_108280 x_108281))))
(assert (forall ((x_108282 R_597) (x_108283 R_597) (x_108284 R_597))
	(diseqR_40 (x_108148 x_108282 x_108283) (Star_40 x_108284))))
(assert (forall ((x_108285 R_597) (x_108286 R_597) (x_108287 R_597))
	(diseqR_40 (Star_40 x_108285) (x_108148 x_108286 x_108287))))
(assert (forall ((x_108288 T_28) (x_108289 T_28))
	(=> (diseqT_26 x_108288 x_108289) (diseqR_40 (Atom_40 x_108288) (Atom_40 x_108289)))))
(assert (forall ((x_108290 R_597) (x_108291 R_597) (x_108292 R_597) (x_108293 R_597))
	(=> (diseqR_40 x_108290 x_108292) (diseqR_40 (x_108147 x_108290 x_108291) (x_108147 x_108292 x_108293)))))
(assert (forall ((x_108290 R_597) (x_108291 R_597) (x_108292 R_597) (x_108293 R_597))
	(=> (diseqR_40 x_108291 x_108293) (diseqR_40 (x_108147 x_108290 x_108291) (x_108147 x_108292 x_108293)))))
(assert (forall ((x_108294 R_597) (x_108295 R_597) (x_108296 R_597) (x_108297 R_597))
	(=> (diseqR_40 x_108294 x_108296) (diseqR_40 (x_108148 x_108294 x_108295) (x_108148 x_108296 x_108297)))))
(assert (forall ((x_108294 R_597) (x_108295 R_597) (x_108296 R_597) (x_108297 R_597))
	(=> (diseqR_40 x_108295 x_108297) (diseqR_40 (x_108148 x_108294 x_108295) (x_108148 x_108296 x_108297)))))
(assert (forall ((x_108298 R_597) (x_108299 R_597))
	(=> (diseqR_40 x_108298 x_108299) (diseqR_40 (Star_40 x_108298) (Star_40 x_108299)))))
(declare-fun eps_81 (Bool_421 R_597) Bool)
(assert (forall ((y_2972 R_597))
	(eps_81 true_421 (Star_40 y_2972))))
(assert (forall ((x_108156 Bool_421) (x_108157 Bool_421) (x_108158 Bool_421) (r_598 R_597) (q_307 R_597))
	(=> (and (eps_81 x_108157 r_598) (eps_81 x_108158 q_307) (and_426 x_108156 x_108157 x_108158)) (eps_81 x_108156 (x_108148 r_598 q_307)))))
(assert (forall ((x_108159 Bool_421) (x_108160 Bool_421) (x_108161 Bool_421) (p_547 R_597) (q_308 R_597))
	(=> (and (eps_81 x_108160 p_547) (eps_81 x_108161 q_308) (or_436 x_108159 x_108160 x_108161)) (eps_81 x_108159 (x_108147 p_547 q_308)))))
(assert (eps_81 true_421 Eps_80))
(assert (forall ((x_108150 R_597) (x_108154 T_28))
	(eps_81 false_421 (Atom_40 x_108154))))
(assert (forall ((x_108150 R_597))
	(eps_81 false_421 Nil_411)))
(declare-fun step_40 (R_597 R_597 T_28) Bool)
(assert (forall ((x_108166 R_597) (p_548 R_597) (y_2973 T_28))
	(=> (step_40 x_108166 p_548 y_2973) (step_40 (x_108148 x_108166 (Star_40 p_548)) (Star_40 p_548) y_2973))))
(assert (forall ((x_108169 R_597) (x_108170 R_597) (r_599 R_597) (q_309 R_597) (y_2973 T_28))
	(=> (and (step_40 x_108169 r_599 y_2973) (step_40 x_108170 q_309 y_2973) (eps_81 true_421 r_599)) (step_40 (x_108147 (x_108148 x_108169 q_309) x_108170) (x_108148 r_599 q_309) y_2973))))
(assert (forall ((x_108173 R_597) (r_599 R_597) (q_309 R_597) (y_2973 T_28))
	(=> (and (step_40 x_108173 r_599 y_2973) (eps_81 false_421 r_599)) (step_40 (x_108147 (x_108148 x_108173 q_309) Nil_411) (x_108148 r_599 q_309) y_2973))))
(assert (forall ((x_108175 R_597) (x_108176 R_597) (p_549 R_597) (q_310 R_597) (y_2973 T_28))
	(=> (and (step_40 x_108175 p_549 y_2973) (step_40 x_108176 q_310 y_2973)) (step_40 (x_108147 x_108175 x_108176) (x_108147 p_549 q_310) y_2973))))
(assert (forall ((b_115 T_28))
	(step_40 Eps_80 (Atom_40 b_115) b_115)))
(assert (forall ((b_115 T_28) (y_2973 T_28))
	(=> (diseqT_26 b_115 y_2973) (step_40 Nil_411 (Atom_40 b_115) y_2973))))
(assert (forall ((x_108152 R_597) (y_2973 T_28))
	(step_40 Nil_411 Eps_80 y_2973)))
(assert (forall ((x_108152 R_597) (y_2973 T_28))
	(step_40 Nil_411 Nil_411 y_2973)))
(declare-fun rec_26 (Bool_421 R_597 list_360) Bool)
(assert (forall ((x_108181 Bool_421) (x_108182 R_597) (z_2582 T_28) (xs_852 list_360) (x_108153 R_597))
	(=> (and (step_40 x_108182 x_108153 z_2582) (rec_26 x_108181 x_108182 xs_852)) (rec_26 x_108181 x_108153 (cons_354 z_2582 xs_852)))))
(assert (forall ((x_108184 Bool_421) (x_108153 R_597))
	(=> (eps_81 x_108184 x_108153) (rec_26 x_108184 x_108153 nil_410))))
(assert (forall ((x_108186 Bool_421) (x_108187 Bool_421) (p_550 R_597) (q_311 R_597) (s_597 list_360))
	(=> (and true (diseqBool_206 x_108186 x_108187) (rec_26 x_108186 (x_108148 p_550 q_311) s_597) (rec_26 x_108187 (x_108148 q_311 p_550) s_597)) false)))
(check-sat)
