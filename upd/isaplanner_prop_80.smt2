
(set-logic HORN)
(define-fun Z_135 () Int 0)
(define-fun S_46 ((x Int)) Int (+ x 1))
(define-fun Z_131 () Int 0)
(define-fun S_45 ((x Int)) Int (+ x 1))
(declare-fun diseqInt (Int Int) Bool)
(declare-fun unS_49 (Int Int) Bool)
(declare-fun isZ_46 (Int) Bool)
(declare-fun isS_46 (Int) Bool)
(assert (forall ((x_1416 Int))
	(unS_49 x_1416 (S_46 x_1416))))
(assert (isZ_46 Z_135))
(assert (forall ((x_1418 Int))
	(isS_46 (S_46 x_1418))))
(assert (forall ((x_1419 Int))
	(diseqInt Z_135 (S_46 x_1419))))
(assert (forall ((x_1420 Int))
	(diseqInt (S_46 x_1420) Z_135)))
(assert (forall ((x_1421 Int) (x_1422 Int))
	(=> (diseqInt x_1421 x_1422) (diseqInt (S_46 x_1421) (S_46 x_1422)))))
(declare-fun add_24 (Int Int Int) Bool)
(declare-fun minus_24 (Int Int Int) Bool)
(declare-fun le_24 (Int Int) Bool)
(declare-fun ge_24 (Int Int) Bool)
(declare-fun lt_24 (Int Int) Bool)
(declare-fun gt_24 (Int Int) Bool)
(declare-fun mult_24 (Int Int Int) Bool)
(declare-fun div_24 (Int Int Int) Bool)
(declare-fun mod_24 (Int Int Int) Bool)
(assert (forall ((y_109 Int))
	(add_24 y_109 Z_135 y_109)))
(assert (forall ((x_1392 Int) (y_109 Int) (r_24 Int))
	(=> (add_24 r_24 x_1392 y_109) (add_24 (S_46 r_24) (S_46 x_1392) y_109))))
(assert (forall ((y_109 Int))
	(minus_24 Z_135 Z_135 y_109)))
(assert (forall ((x_1392 Int) (y_109 Int) (r_24 Int))
	(=> (minus_24 r_24 x_1392 y_109) (minus_24 (S_46 r_24) (S_46 x_1392) y_109))))
(assert (forall ((y_109 Int))
	(le_24 Z_135 y_109)))
(assert (forall ((x_1392 Int) (y_109 Int))
	(=> (le_24 x_1392 y_109) (le_24 (S_46 x_1392) (S_46 y_109)))))
(assert (forall ((y_109 Int))
	(ge_24 y_109 Z_135)))
(assert (forall ((x_1392 Int) (y_109 Int))
	(=> (ge_24 x_1392 y_109) (ge_24 (S_46 x_1392) (S_46 y_109)))))
(assert (forall ((y_109 Int))
	(lt_24 Z_135 (S_46 y_109))))
(assert (forall ((x_1392 Int) (y_109 Int))
	(=> (lt_24 x_1392 y_109) (lt_24 (S_46 x_1392) (S_46 y_109)))))
(assert (forall ((y_109 Int))
	(gt_24 (S_46 y_109) Z_135)))
(assert (forall ((x_1392 Int) (y_109 Int))
	(=> (gt_24 x_1392 y_109) (gt_24 (S_46 x_1392) (S_46 y_109)))))
(assert (forall ((y_109 Int))
	(mult_24 Z_135 Z_135 y_109)))
(assert (forall ((x_1392 Int) (y_109 Int) (r_24 Int) (z_136 Int))
	(=> (and (mult_24 r_24 x_1392 y_109) (add_24 z_136 r_24 y_109)) (mult_24 z_136 (S_46 x_1392) y_109))))
(assert (forall ((x_1392 Int) (y_109 Int))
	(=> (lt_24 x_1392 y_109) (div_24 Z_135 x_1392 y_109))))
(assert (forall ((x_1392 Int) (y_109 Int) (r_24 Int) (z_136 Int))
	(=> (and (ge_24 x_1392 y_109) (minus_24 z_136 x_1392 y_109) (div_24 r_24 z_136 y_109)) (div_24 (S_46 r_24) x_1392 y_109))))
(assert (forall ((x_1392 Int) (y_109 Int))
	(=> (lt_24 x_1392 y_109) (mod_24 x_1392 x_1392 y_109))))
(assert (forall ((x_1392 Int) (y_109 Int) (r_24 Int) (z_136 Int))
	(=> (and (ge_24 x_1392 y_109) (minus_24 z_136 x_1392 y_109) (mod_24 r_24 z_136 y_109)) (mod_24 r_24 x_1392 y_109))))
(declare-datatypes ((list_26 0)) (((nil_26) (cons_26 (head_52 Int) (tail_52 list_26)))))
(declare-fun diseqlist_26 (list_26 list_26) Bool)
(declare-fun head_53 (Int list_26) Bool)
(declare-fun tail_53 (list_26 list_26) Bool)
(declare-fun isnil_26 (list_26) Bool)
(declare-fun iscons_26 (list_26) Bool)
(assert (forall ((x_1394 Int) (x_1395 list_26))
	(head_53 x_1394 (cons_26 x_1394 x_1395))))
(assert (forall ((x_1394 Int) (x_1395 list_26))
	(tail_53 x_1395 (cons_26 x_1394 x_1395))))
(assert (isnil_26 nil_26))
(assert (forall ((x_1397 Int) (x_1398 list_26))
	(iscons_26 (cons_26 x_1397 x_1398))))
(assert (forall ((x_1399 Int) (x_1400 list_26))
	(diseqlist_26 nil_26 (cons_26 x_1399 x_1400))))
(assert (forall ((x_1401 Int) (x_1402 list_26))
	(diseqlist_26 (cons_26 x_1401 x_1402) nil_26)))
(assert (forall ((x_1403 Int) (x_1404 list_26) (x_1405 Int) (x_1406 list_26))
	(=> (diseqInt x_1403 x_1405) (diseqlist_26 (cons_26 x_1403 x_1404) (cons_26 x_1405 x_1406)))))
(assert (forall ((x_1403 Int) (x_1404 list_26) (x_1405 Int) (x_1406 list_26))
	(=> (diseqlist_26 x_1404 x_1406) (diseqlist_26 (cons_26 x_1403 x_1404) (cons_26 x_1405 x_1406)))))
(declare-fun diseqInt (Int Int) Bool)
(declare-fun projS_43 (Int Int) Bool)
(declare-fun isZ_45 (Int) Bool)
(declare-fun isS_45 (Int) Bool)
(assert (forall ((x_1408 Int))
	(projS_43 x_1408 (S_45 x_1408))))
(assert (isZ_45 Z_131))
(assert (forall ((x_1410 Int))
	(isS_45 (S_45 x_1410))))
(assert (forall ((x_1411 Int))
	(diseqInt Z_131 (S_45 x_1411))))
(assert (forall ((x_1412 Int))
	(diseqInt (S_45 x_1412) Z_131)))
(assert (forall ((x_1413 Int) (x_1414 Int))
	(=> (diseqInt x_1413 x_1414) (diseqInt (S_45 x_1413) (S_45 x_1414)))))
(declare-fun take_6 (list_26 Int list_26) Bool)
(assert (forall ((x_1372 list_26) (x_1363 Int) (x_1364 list_26) (z_132 Int))
	(=> (take_6 x_1372 z_132 x_1364) (take_6 (cons_26 x_1363 x_1372) (S_45 z_132) (cons_26 x_1363 x_1364)))))
(assert (forall ((z_132 Int))
	(take_6 nil_26 (S_45 z_132) nil_26)))
(assert (forall ((y_105 list_26))
	(take_6 nil_26 Z_131 y_105)))
(declare-fun len_5 (Int list_26) Bool)
(assert (forall ((x_1376 Int) (y_106 Int) (xs_36 list_26))
	(=> (len_5 x_1376 xs_36) (len_5 (S_45 x_1376) (cons_26 y_106 xs_36)))))
(assert (len_5 Z_131 nil_26))
(declare-fun x_1366 (Int Int Int) Bool)
(assert (forall ((x_1378 Int) (x_1368 Int) (z_133 Int))
	(=> (x_1366 x_1378 z_133 x_1368) (x_1366 x_1378 (S_45 z_133) (S_45 x_1368)))))
(assert (forall ((z_133 Int))
	(x_1366 (S_45 z_133) (S_45 z_133) Z_131)))
(assert (forall ((y_107 Int))
	(x_1366 Z_131 Z_131 y_107)))
(declare-fun x_1369 (list_26 list_26 list_26) Bool)
(assert (forall ((x_1383 list_26) (z_134 Int) (xs_37 list_26) (y_108 list_26))
	(=> (x_1369 x_1383 xs_37 y_108) (x_1369 (cons_26 z_134 x_1383) (cons_26 z_134 xs_37) y_108))))
(assert (forall ((x_1384 list_26))
	(x_1369 x_1384 nil_26 x_1384)))
(assert (forall ((x_1385 list_26) (x_1386 list_26) (x_1387 list_26) (x_1388 Int) (x_1389 Int) (x_1390 list_26) (x_1391 list_26) (n_10 Int) (xs_38 list_26) (ys_13 list_26))
	(=> (and true (diseqlist_26 x_1386 x_1391) (x_1369 x_1385 xs_38 ys_13) (take_6 x_1386 n_10 x_1385) (take_6 x_1387 n_10 xs_38) (len_5 x_1388 xs_38) (x_1366 x_1389 n_10 x_1388) (take_6 x_1390 x_1389 ys_13) (x_1369 x_1391 x_1387 x_1390)) false)))
(check-sat)
