
(set-logic HORN)
(define-fun Z_33 () Int 0)
(define-fun S_11 ((x Int)) Int (+ x 1))
(declare-datatypes ((Bool_6 0)) (((false_6) (true_6))))
(declare-fun diseqBool_1 (Bool_6 Bool_6) Bool)
(declare-fun isfalse_1 (Bool_6) Bool)
(declare-fun istrue_1 (Bool_6) Bool)
(assert (isfalse_1 false_6))
(assert (istrue_1 true_6))
(assert (diseqBool_1 false_6 true_6))
(assert (diseqBool_1 true_6 false_6))
(declare-fun and_6 (Bool_6 Bool_6 Bool_6) Bool)
(declare-fun or_6 (Bool_6 Bool_6 Bool_6) Bool)
(declare-fun hence_6 (Bool_6 Bool_6 Bool_6) Bool)
(declare-fun not_6 (Bool_6 Bool_6) Bool)
(assert (and_6 false_6 false_6 false_6))
(assert (and_6 false_6 true_6 false_6))
(assert (and_6 false_6 false_6 true_6))
(assert (and_6 true_6 true_6 true_6))
(assert (or_6 false_6 false_6 false_6))
(assert (or_6 true_6 true_6 false_6))
(assert (or_6 true_6 false_6 true_6))
(assert (or_6 true_6 true_6 true_6))
(assert (hence_6 true_6 false_6 false_6))
(assert (hence_6 false_6 true_6 false_6))
(assert (hence_6 true_6 false_6 true_6))
(assert (hence_6 true_6 true_6 true_6))
(assert (not_6 true_6 false_6))
(assert (not_6 false_6 true_6))
(declare-fun diseqInt (Int Int) Bool)
(declare-fun projS_11 (Int Int) Bool)
(declare-fun isZ_11 (Int) Bool)
(declare-fun isS_11 (Int) Bool)
(assert (forall ((x_388 Int))
	(projS_11 x_388 (S_11 x_388))))
(assert (isZ_11 Z_33))
(assert (forall ((x_390 Int))
	(isS_11 (S_11 x_390))))
(assert (forall ((x_391 Int))
	(diseqInt Z_33 (S_11 x_391))))
(assert (forall ((x_392 Int))
	(diseqInt (S_11 x_392) Z_33)))
(assert (forall ((x_393 Int) (x_394 Int))
	(=> (diseqInt x_393 x_394) (diseqInt (S_11 x_393) (S_11 x_394)))))
(declare-fun x_370 (Bool_6 Int Int) Bool)
(assert (forall ((x_375 Bool_6) (x_372 Int) (z_34 Int))
	(=> (x_370 x_375 z_34 x_372) (x_370 x_375 (S_11 z_34) (S_11 x_372)))))
(assert (forall ((z_34 Int))
	(x_370 false_6 (S_11 z_34) Z_33)))
(assert (forall ((y_28 Int))
	(x_370 true_6 Z_33 y_28)))
(declare-fun x_373 (Int Int Int) Bool)
(assert (forall ((x_380 Int) (z_35 Int) (y_29 Int))
	(=> (x_373 x_380 z_35 y_29) (x_373 (S_11 x_380) (S_11 z_35) y_29))))
(assert (forall ((x_381 Int))
	(x_373 x_381 Z_33 x_381)))
(assert (forall ((x_382 Int) (n_1 Int) (m_0 Int))
	(=> (and true (x_373 x_382 n_1 m_0) (x_370 false_6 n_1 x_382)) false)))
(check-sat)
