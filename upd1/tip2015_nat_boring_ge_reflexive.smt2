
(set-logic HORN)
(define-fun zero_69 () Int 0)
(define-fun succ_67 ((x Int)) Int (+ x 1))
(declare-datatypes ((Bool_190 0)) (((false_190) (true_190))))
(declare-fun diseqBool_82 (Bool_190 Bool_190) Bool)
(declare-fun isfalse_82 (Bool_190) Bool)
(declare-fun istrue_82 (Bool_190) Bool)
(assert (isfalse_82 false_190))
(assert (istrue_82 true_190))
(assert (diseqBool_82 false_190 true_190))
(assert (diseqBool_82 true_190 false_190))
(declare-fun and_190 (Bool_190 Bool_190 Bool_190) Bool)
(declare-fun or_193 (Bool_190 Bool_190 Bool_190) Bool)
(declare-fun hence_190 (Bool_190 Bool_190 Bool_190) Bool)
(declare-fun not_192 (Bool_190 Bool_190) Bool)
(assert (and_190 false_190 false_190 false_190))
(assert (and_190 false_190 true_190 false_190))
(assert (and_190 false_190 false_190 true_190))
(assert (and_190 true_190 true_190 true_190))
(assert (or_193 false_190 false_190 false_190))
(assert (or_193 true_190 true_190 false_190))
(assert (or_193 true_190 false_190 true_190))
(assert (or_193 true_190 true_190 true_190))
(assert (hence_190 true_190 false_190 false_190))
(assert (hence_190 false_190 true_190 false_190))
(assert (hence_190 true_190 false_190 true_190))
(assert (hence_190 true_190 true_190 true_190))
(assert (not_192 true_190 false_190))
(assert (not_192 false_190 true_190))
(declare-fun diseqInt (Int Int) Bool)
(declare-fun p_185 (Int Int) Bool)
(declare-fun iszero_67 (Int) Bool)
(declare-fun issucc_67 (Int) Bool)
(assert (forall ((x_28077 Int))
	(p_185 x_28077 (succ_67 x_28077))))
(assert (iszero_67 zero_69))
(assert (forall ((x_28079 Int))
	(issucc_67 (succ_67 x_28079))))
(assert (forall ((x_28080 Int))
	(diseqInt zero_69 (succ_67 x_28080))))
(assert (forall ((x_28081 Int))
	(diseqInt (succ_67 x_28081) zero_69)))
(assert (forall ((x_28082 Int) (x_28083 Int))
	(=> (diseqInt x_28082 x_28083) (diseqInt (succ_67 x_28082) (succ_67 x_28083)))))
(declare-fun leq_25 (Bool_190 Int Int) Bool)
(assert (forall ((x_28066 Bool_190) (x_28063 Int) (z_1100 Int))
	(=> (leq_25 x_28066 z_1100 x_28063) (leq_25 x_28066 (succ_67 z_1100) (succ_67 x_28063)))))
(assert (forall ((z_1100 Int))
	(leq_25 false_190 (succ_67 z_1100) zero_69)))
(assert (forall ((y_1158 Int))
	(leq_25 true_190 zero_69 y_1158)))
(declare-fun geq_1 (Bool_190 Int Int) Bool)
(assert (forall ((x_28070 Bool_190) (x_28064 Int) (y_1159 Int))
	(=> (leq_25 x_28070 y_1159 x_28064) (geq_1 x_28070 x_28064 y_1159))))
(assert (forall ((x_28065 Int))
	(=> (and true (geq_1 false_190 x_28065 x_28065)) false)))
(check-sat)
