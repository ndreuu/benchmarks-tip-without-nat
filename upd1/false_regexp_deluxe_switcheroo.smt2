
(set-logic HORN)
(declare-datatypes ((Bool_432 0)) (((false_432) (true_432))))
(declare-fun diseqBool_215 (Bool_432 Bool_432) Bool)
(declare-fun isfalse_215 (Bool_432) Bool)
(declare-fun istrue_215 (Bool_432) Bool)
(assert (isfalse_215 false_432))
(assert (istrue_215 true_432))
(assert (diseqBool_215 false_432 true_432))
(assert (diseqBool_215 true_432 false_432))
(declare-fun and_438 (Bool_432 Bool_432 Bool_432) Bool)
(declare-fun or_449 (Bool_432 Bool_432 Bool_432) Bool)
(declare-fun hence_432 (Bool_432 Bool_432 Bool_432) Bool)
(declare-fun not_437 (Bool_432 Bool_432) Bool)
(assert (and_438 false_432 false_432 false_432))
(assert (and_438 false_432 true_432 false_432))
(assert (and_438 false_432 false_432 true_432))
(assert (and_438 true_432 true_432 true_432))
(assert (or_449 false_432 false_432 false_432))
(assert (or_449 true_432 true_432 false_432))
(assert (or_449 true_432 false_432 true_432))
(assert (or_449 true_432 true_432 true_432))
(assert (hence_432 true_432 false_432 false_432))
(assert (hence_432 false_432 true_432 false_432))
(assert (hence_432 true_432 false_432 true_432))
(assert (hence_432 true_432 true_432 true_432))
(assert (not_437 true_432 false_432))
(assert (not_437 false_432 true_432))
(declare-datatypes ((T_35 0)) (((A_117) (B_126) (C_71))))
(declare-fun diseqT_31 (T_35 T_35) Bool)
(declare-fun isA_38 (T_35) Bool)
(declare-fun isB_38 (T_35) Bool)
(declare-fun isC_39 (T_35) Bool)
(assert (isA_38 A_117))
(assert (isB_38 B_126))
(assert (isC_39 C_71))
(assert (diseqT_31 A_117 B_126))
(assert (diseqT_31 A_117 C_71))
(assert (diseqT_31 B_126 A_117))
(assert (diseqT_31 C_71 A_117))
(assert (diseqT_31 B_126 C_71))
(assert (diseqT_31 C_71 B_126))
(declare-datatypes ((list_380 0)) (((nil_435) (cons_374 (head_748 T_35) (tail_754 list_380)))))
(declare-fun diseqlist_374 (list_380 list_380) Bool)
(declare-fun head_749 (T_35 list_380) Bool)
(declare-fun tail_755 (list_380 list_380) Bool)
(declare-fun isnil_435 (list_380) Bool)
(declare-fun iscons_374 (list_380) Bool)
(assert (forall ((x_124701 T_35) (x_124702 list_380))
	(head_749 x_124701 (cons_374 x_124701 x_124702))))
(assert (forall ((x_124701 T_35) (x_124702 list_380))
	(tail_755 x_124702 (cons_374 x_124701 x_124702))))
(assert (isnil_435 nil_435))
(assert (forall ((x_124704 T_35) (x_124705 list_380))
	(iscons_374 (cons_374 x_124704 x_124705))))
(assert (forall ((x_124706 T_35) (x_124707 list_380))
	(diseqlist_374 nil_435 (cons_374 x_124706 x_124707))))
(assert (forall ((x_124708 T_35) (x_124709 list_380))
	(diseqlist_374 (cons_374 x_124708 x_124709) nil_435)))
(assert (forall ((x_124710 T_35) (x_124711 list_380) (x_124712 T_35) (x_124713 list_380))
	(=> (diseqT_31 x_124710 x_124712) (diseqlist_374 (cons_374 x_124710 x_124711) (cons_374 x_124712 x_124713)))))
(assert (forall ((x_124710 T_35) (x_124711 list_380) (x_124712 T_35) (x_124713 list_380))
	(=> (diseqlist_374 x_124711 x_124713) (diseqlist_374 (cons_374 x_124710 x_124711) (cons_374 x_124712 x_124713)))))
(declare-datatypes ((R_633 0)) (((Nil_436) (Eps_90) (Atom_45 (projAtom_90 T_35)) (x_120294 (proj_320 R_633) (proj_321 R_633)) (x_120295 (proj_322 R_633) (proj_323 R_633)) (x_120296 (proj_324 R_633) (proj_325 R_633)) (Star_45 (projStar_90 R_633)))))
(declare-fun diseqR_45 (R_633 R_633) Bool)
(declare-fun projAtom_91 (T_35 R_633) Bool)
(declare-fun proj_326 (R_633 R_633) Bool)
(declare-fun proj_327 (R_633 R_633) Bool)
(declare-fun proj_328 (R_633 R_633) Bool)
(declare-fun proj_329 (R_633 R_633) Bool)
(declare-fun proj_330 (R_633 R_633) Bool)
(declare-fun proj_331 (R_633 R_633) Bool)
(declare-fun projStar_91 (R_633 R_633) Bool)
(declare-fun isNil_436 (R_633) Bool)
(declare-fun isEps_45 (R_633) Bool)
(declare-fun isAtom_45 (R_633) Bool)
(declare-fun isx_95 (R_633) Bool)
(declare-fun isx_96 (R_633) Bool)
(declare-fun isx_97 (R_633) Bool)
(declare-fun isStar_45 (R_633) Bool)
(assert (forall ((x_124716 T_35))
	(projAtom_91 x_124716 (Atom_45 x_124716))))
(assert (forall ((x_124718 R_633) (x_124719 R_633))
	(proj_326 x_124718 (x_120294 x_124718 x_124719))))
(assert (forall ((x_124718 R_633) (x_124719 R_633))
	(proj_327 x_124719 (x_120294 x_124718 x_124719))))
(assert (forall ((x_124721 R_633) (x_124722 R_633))
	(proj_328 x_124721 (x_120295 x_124721 x_124722))))
(assert (forall ((x_124721 R_633) (x_124722 R_633))
	(proj_329 x_124722 (x_120295 x_124721 x_124722))))
(assert (forall ((x_124724 R_633) (x_124725 R_633))
	(proj_330 x_124724 (x_120296 x_124724 x_124725))))
(assert (forall ((x_124724 R_633) (x_124725 R_633))
	(proj_331 x_124725 (x_120296 x_124724 x_124725))))
(assert (forall ((x_124727 R_633))
	(projStar_91 x_124727 (Star_45 x_124727))))
(assert (isNil_436 Nil_436))
(assert (isEps_45 Eps_90))
(assert (forall ((x_124729 T_35))
	(isAtom_45 (Atom_45 x_124729))))
(assert (forall ((x_124730 R_633) (x_124731 R_633))
	(isx_95 (x_120294 x_124730 x_124731))))
(assert (forall ((x_124732 R_633) (x_124733 R_633))
	(isx_96 (x_120295 x_124732 x_124733))))
(assert (forall ((x_124734 R_633) (x_124735 R_633))
	(isx_97 (x_120296 x_124734 x_124735))))
(assert (forall ((x_124736 R_633))
	(isStar_45 (Star_45 x_124736))))
(assert (diseqR_45 Nil_436 Eps_90))
(assert (forall ((x_124737 T_35))
	(diseqR_45 Nil_436 (Atom_45 x_124737))))
(assert (forall ((x_124738 R_633) (x_124739 R_633))
	(diseqR_45 Nil_436 (x_120294 x_124738 x_124739))))
(assert (forall ((x_124740 R_633) (x_124741 R_633))
	(diseqR_45 Nil_436 (x_120295 x_124740 x_124741))))
(assert (forall ((x_124742 R_633) (x_124743 R_633))
	(diseqR_45 Nil_436 (x_120296 x_124742 x_124743))))
(assert (forall ((x_124744 R_633))
	(diseqR_45 Nil_436 (Star_45 x_124744))))
(assert (diseqR_45 Eps_90 Nil_436))
(assert (forall ((x_124745 T_35))
	(diseqR_45 (Atom_45 x_124745) Nil_436)))
(assert (forall ((x_124746 R_633) (x_124747 R_633))
	(diseqR_45 (x_120294 x_124746 x_124747) Nil_436)))
(assert (forall ((x_124748 R_633) (x_124749 R_633))
	(diseqR_45 (x_120295 x_124748 x_124749) Nil_436)))
(assert (forall ((x_124750 R_633) (x_124751 R_633))
	(diseqR_45 (x_120296 x_124750 x_124751) Nil_436)))
(assert (forall ((x_124752 R_633))
	(diseqR_45 (Star_45 x_124752) Nil_436)))
(assert (forall ((x_124753 T_35))
	(diseqR_45 Eps_90 (Atom_45 x_124753))))
(assert (forall ((x_124754 R_633) (x_124755 R_633))
	(diseqR_45 Eps_90 (x_120294 x_124754 x_124755))))
(assert (forall ((x_124756 R_633) (x_124757 R_633))
	(diseqR_45 Eps_90 (x_120295 x_124756 x_124757))))
(assert (forall ((x_124758 R_633) (x_124759 R_633))
	(diseqR_45 Eps_90 (x_120296 x_124758 x_124759))))
(assert (forall ((x_124760 R_633))
	(diseqR_45 Eps_90 (Star_45 x_124760))))
(assert (forall ((x_124761 T_35))
	(diseqR_45 (Atom_45 x_124761) Eps_90)))
(assert (forall ((x_124762 R_633) (x_124763 R_633))
	(diseqR_45 (x_120294 x_124762 x_124763) Eps_90)))
(assert (forall ((x_124764 R_633) (x_124765 R_633))
	(diseqR_45 (x_120295 x_124764 x_124765) Eps_90)))
(assert (forall ((x_124766 R_633) (x_124767 R_633))
	(diseqR_45 (x_120296 x_124766 x_124767) Eps_90)))
(assert (forall ((x_124768 R_633))
	(diseqR_45 (Star_45 x_124768) Eps_90)))
(assert (forall ((x_124769 T_35) (x_124770 R_633) (x_124771 R_633))
	(diseqR_45 (Atom_45 x_124769) (x_120294 x_124770 x_124771))))
(assert (forall ((x_124772 T_35) (x_124773 R_633) (x_124774 R_633))
	(diseqR_45 (Atom_45 x_124772) (x_120295 x_124773 x_124774))))
(assert (forall ((x_124775 T_35) (x_124776 R_633) (x_124777 R_633))
	(diseqR_45 (Atom_45 x_124775) (x_120296 x_124776 x_124777))))
(assert (forall ((x_124778 T_35) (x_124779 R_633))
	(diseqR_45 (Atom_45 x_124778) (Star_45 x_124779))))
(assert (forall ((x_124780 R_633) (x_124781 R_633) (x_124782 T_35))
	(diseqR_45 (x_120294 x_124780 x_124781) (Atom_45 x_124782))))
(assert (forall ((x_124783 R_633) (x_124784 R_633) (x_124785 T_35))
	(diseqR_45 (x_120295 x_124783 x_124784) (Atom_45 x_124785))))
(assert (forall ((x_124786 R_633) (x_124787 R_633) (x_124788 T_35))
	(diseqR_45 (x_120296 x_124786 x_124787) (Atom_45 x_124788))))
(assert (forall ((x_124789 R_633) (x_124790 T_35))
	(diseqR_45 (Star_45 x_124789) (Atom_45 x_124790))))
(assert (forall ((x_124791 R_633) (x_124792 R_633) (x_124793 R_633) (x_124794 R_633))
	(diseqR_45 (x_120294 x_124791 x_124792) (x_120295 x_124793 x_124794))))
(assert (forall ((x_124795 R_633) (x_124796 R_633) (x_124797 R_633) (x_124798 R_633))
	(diseqR_45 (x_120294 x_124795 x_124796) (x_120296 x_124797 x_124798))))
(assert (forall ((x_124799 R_633) (x_124800 R_633) (x_124801 R_633))
	(diseqR_45 (x_120294 x_124799 x_124800) (Star_45 x_124801))))
(assert (forall ((x_124802 R_633) (x_124803 R_633) (x_124804 R_633) (x_124805 R_633))
	(diseqR_45 (x_120295 x_124802 x_124803) (x_120294 x_124804 x_124805))))
(assert (forall ((x_124806 R_633) (x_124807 R_633) (x_124808 R_633) (x_124809 R_633))
	(diseqR_45 (x_120296 x_124806 x_124807) (x_120294 x_124808 x_124809))))
(assert (forall ((x_124810 R_633) (x_124811 R_633) (x_124812 R_633))
	(diseqR_45 (Star_45 x_124810) (x_120294 x_124811 x_124812))))
(assert (forall ((x_124813 R_633) (x_124814 R_633) (x_124815 R_633) (x_124816 R_633))
	(diseqR_45 (x_120295 x_124813 x_124814) (x_120296 x_124815 x_124816))))
(assert (forall ((x_124817 R_633) (x_124818 R_633) (x_124819 R_633))
	(diseqR_45 (x_120295 x_124817 x_124818) (Star_45 x_124819))))
(assert (forall ((x_124820 R_633) (x_124821 R_633) (x_124822 R_633) (x_124823 R_633))
	(diseqR_45 (x_120296 x_124820 x_124821) (x_120295 x_124822 x_124823))))
(assert (forall ((x_124824 R_633) (x_124825 R_633) (x_124826 R_633))
	(diseqR_45 (Star_45 x_124824) (x_120295 x_124825 x_124826))))
(assert (forall ((x_124827 R_633) (x_124828 R_633) (x_124829 R_633))
	(diseqR_45 (x_120296 x_124827 x_124828) (Star_45 x_124829))))
(assert (forall ((x_124830 R_633) (x_124831 R_633) (x_124832 R_633))
	(diseqR_45 (Star_45 x_124830) (x_120296 x_124831 x_124832))))
(assert (forall ((x_124833 T_35) (x_124834 T_35))
	(=> (diseqT_31 x_124833 x_124834) (diseqR_45 (Atom_45 x_124833) (Atom_45 x_124834)))))
(assert (forall ((x_124835 R_633) (x_124836 R_633) (x_124837 R_633) (x_124838 R_633))
	(=> (diseqR_45 x_124835 x_124837) (diseqR_45 (x_120294 x_124835 x_124836) (x_120294 x_124837 x_124838)))))
(assert (forall ((x_124835 R_633) (x_124836 R_633) (x_124837 R_633) (x_124838 R_633))
	(=> (diseqR_45 x_124836 x_124838) (diseqR_45 (x_120294 x_124835 x_124836) (x_120294 x_124837 x_124838)))))
(assert (forall ((x_124839 R_633) (x_124840 R_633) (x_124841 R_633) (x_124842 R_633))
	(=> (diseqR_45 x_124839 x_124841) (diseqR_45 (x_120295 x_124839 x_124840) (x_120295 x_124841 x_124842)))))
(assert (forall ((x_124839 R_633) (x_124840 R_633) (x_124841 R_633) (x_124842 R_633))
	(=> (diseqR_45 x_124840 x_124842) (diseqR_45 (x_120295 x_124839 x_124840) (x_120295 x_124841 x_124842)))))
(assert (forall ((x_124843 R_633) (x_124844 R_633) (x_124845 R_633) (x_124846 R_633))
	(=> (diseqR_45 x_124843 x_124845) (diseqR_45 (x_120296 x_124843 x_124844) (x_120296 x_124845 x_124846)))))
(assert (forall ((x_124843 R_633) (x_124844 R_633) (x_124845 R_633) (x_124846 R_633))
	(=> (diseqR_45 x_124844 x_124846) (diseqR_45 (x_120296 x_124843 x_124844) (x_120296 x_124845 x_124846)))))
(assert (forall ((x_124847 R_633) (x_124848 R_633))
	(=> (diseqR_45 x_124847 x_124848) (diseqR_45 (Star_45 x_124847) (Star_45 x_124848)))))
(declare-fun x_120297 (R_633 R_633 R_633) Bool)
(assert (forall ((y_3133 R_633))
	(x_120297 Nil_436 Nil_436 y_3133)))
(assert (forall ((x_120299 R_633) (x_120722 T_35))
	(x_120297 Nil_436 (Atom_45 x_120722) Nil_436)))
(assert (forall ((x_120299 R_633))
	(x_120297 Nil_436 Eps_90 Nil_436)))
(assert (forall ((x_120299 R_633) (x_120723 R_633))
	(x_120297 Nil_436 (Star_45 x_120723) Nil_436)))
(assert (forall ((x_120299 R_633) (x_120724 R_633) (x_120725 R_633))
	(x_120297 Nil_436 (x_120294 x_120724 x_120725) Nil_436)))
(assert (forall ((x_120299 R_633) (x_120726 R_633) (x_120727 R_633))
	(x_120297 Nil_436 (x_120295 x_120726 x_120727) Nil_436)))
(assert (forall ((x_120299 R_633) (x_120728 R_633) (x_120729 R_633))
	(x_120297 Nil_436 (x_120296 x_120728 x_120729) Nil_436)))
(assert (forall ((x_120300 R_633) (x_120378 T_35) (x_120299 R_633))
	(x_120297 (Atom_45 x_120378) Eps_90 (Atom_45 x_120378))))
(assert (forall ((x_120300 R_633) (x_120299 R_633))
	(x_120297 Eps_90 Eps_90 Eps_90)))
(assert (forall ((x_120300 R_633) (x_120379 R_633) (x_120299 R_633))
	(x_120297 (Star_45 x_120379) Eps_90 (Star_45 x_120379))))
(assert (forall ((x_120300 R_633) (x_120380 R_633) (x_120381 R_633) (x_120299 R_633))
	(x_120297 (x_120294 x_120380 x_120381) Eps_90 (x_120294 x_120380 x_120381))))
(assert (forall ((x_120300 R_633) (x_120382 R_633) (x_120383 R_633) (x_120299 R_633))
	(x_120297 (x_120295 x_120382 x_120383) Eps_90 (x_120295 x_120382 x_120383))))
(assert (forall ((x_120300 R_633) (x_120384 R_633) (x_120385 R_633) (x_120299 R_633))
	(x_120297 (x_120296 x_120384 x_120385) Eps_90 (x_120296 x_120384 x_120385))))
(assert (forall ((x_120301 R_633) (x_120322 T_35) (x_120300 R_633) (x_120299 R_633))
	(x_120297 (Atom_45 x_120322) (Atom_45 x_120322) Eps_90)))
(assert (forall ((x_120301 R_633) (x_120323 R_633) (x_120300 R_633) (x_120299 R_633))
	(x_120297 (Star_45 x_120323) (Star_45 x_120323) Eps_90)))
(assert (forall ((x_120301 R_633) (x_120324 R_633) (x_120325 R_633) (x_120300 R_633) (x_120299 R_633))
	(x_120297 (x_120294 x_120324 x_120325) (x_120294 x_120324 x_120325) Eps_90)))
(assert (forall ((x_120301 R_633) (x_120326 R_633) (x_120327 R_633) (x_120300 R_633) (x_120299 R_633))
	(x_120297 (x_120295 x_120326 x_120327) (x_120295 x_120326 x_120327) Eps_90)))
(assert (forall ((x_120301 R_633) (x_120328 R_633) (x_120329 R_633) (x_120300 R_633) (x_120299 R_633))
	(x_120297 (x_120296 x_120328 x_120329) (x_120296 x_120328 x_120329) Eps_90)))
(assert (forall ((x_120302 R_633) (x_120314 T_35) (x_120301 R_633) (x_120330 T_35) (x_120300 R_633) (x_120299 R_633))
	(x_120297 (x_120296 (Atom_45 x_120330) (Atom_45 x_120314)) (Atom_45 x_120330) (Atom_45 x_120314))))
(assert (forall ((x_120302 R_633) (x_120314 T_35) (x_120301 R_633) (x_120331 R_633) (x_120300 R_633) (x_120299 R_633))
	(x_120297 (x_120296 (Star_45 x_120331) (Atom_45 x_120314)) (Star_45 x_120331) (Atom_45 x_120314))))
(assert (forall ((x_120302 R_633) (x_120314 T_35) (x_120301 R_633) (x_120332 R_633) (x_120333 R_633) (x_120300 R_633) (x_120299 R_633))
	(x_120297 (x_120296 (x_120294 x_120332 x_120333) (Atom_45 x_120314)) (x_120294 x_120332 x_120333) (Atom_45 x_120314))))
(assert (forall ((x_120302 R_633) (x_120314 T_35) (x_120301 R_633) (x_120334 R_633) (x_120335 R_633) (x_120300 R_633) (x_120299 R_633))
	(x_120297 (x_120296 (x_120295 x_120334 x_120335) (Atom_45 x_120314)) (x_120295 x_120334 x_120335) (Atom_45 x_120314))))
(assert (forall ((x_120302 R_633) (x_120314 T_35) (x_120301 R_633) (x_120336 R_633) (x_120337 R_633) (x_120300 R_633) (x_120299 R_633))
	(x_120297 (x_120296 (x_120296 x_120336 x_120337) (Atom_45 x_120314)) (x_120296 x_120336 x_120337) (Atom_45 x_120314))))
(assert (forall ((x_120302 R_633) (x_120315 R_633) (x_120301 R_633) (x_120346 T_35) (x_120300 R_633) (x_120299 R_633))
	(x_120297 (x_120296 (Atom_45 x_120346) (Star_45 x_120315)) (Atom_45 x_120346) (Star_45 x_120315))))
(assert (forall ((x_120302 R_633) (x_120315 R_633) (x_120301 R_633) (x_120347 R_633) (x_120300 R_633) (x_120299 R_633))
	(x_120297 (x_120296 (Star_45 x_120347) (Star_45 x_120315)) (Star_45 x_120347) (Star_45 x_120315))))
(assert (forall ((x_120302 R_633) (x_120315 R_633) (x_120301 R_633) (x_120348 R_633) (x_120349 R_633) (x_120300 R_633) (x_120299 R_633))
	(x_120297 (x_120296 (x_120294 x_120348 x_120349) (Star_45 x_120315)) (x_120294 x_120348 x_120349) (Star_45 x_120315))))
(assert (forall ((x_120302 R_633) (x_120315 R_633) (x_120301 R_633) (x_120350 R_633) (x_120351 R_633) (x_120300 R_633) (x_120299 R_633))
	(x_120297 (x_120296 (x_120295 x_120350 x_120351) (Star_45 x_120315)) (x_120295 x_120350 x_120351) (Star_45 x_120315))))
(assert (forall ((x_120302 R_633) (x_120315 R_633) (x_120301 R_633) (x_120352 R_633) (x_120353 R_633) (x_120300 R_633) (x_120299 R_633))
	(x_120297 (x_120296 (x_120296 x_120352 x_120353) (Star_45 x_120315)) (x_120296 x_120352 x_120353) (Star_45 x_120315))))
(assert (forall ((x_120302 R_633) (x_120316 R_633) (x_120317 R_633) (x_120301 R_633) (x_120354 T_35) (x_120300 R_633) (x_120299 R_633))
	(x_120297 (x_120296 (Atom_45 x_120354) (x_120294 x_120316 x_120317)) (Atom_45 x_120354) (x_120294 x_120316 x_120317))))
(assert (forall ((x_120302 R_633) (x_120316 R_633) (x_120317 R_633) (x_120301 R_633) (x_120355 R_633) (x_120300 R_633) (x_120299 R_633))
	(x_120297 (x_120296 (Star_45 x_120355) (x_120294 x_120316 x_120317)) (Star_45 x_120355) (x_120294 x_120316 x_120317))))
(assert (forall ((x_120302 R_633) (x_120316 R_633) (x_120317 R_633) (x_120301 R_633) (x_120356 R_633) (x_120357 R_633) (x_120300 R_633) (x_120299 R_633))
	(x_120297 (x_120296 (x_120294 x_120356 x_120357) (x_120294 x_120316 x_120317)) (x_120294 x_120356 x_120357) (x_120294 x_120316 x_120317))))
(assert (forall ((x_120302 R_633) (x_120316 R_633) (x_120317 R_633) (x_120301 R_633) (x_120358 R_633) (x_120359 R_633) (x_120300 R_633) (x_120299 R_633))
	(x_120297 (x_120296 (x_120295 x_120358 x_120359) (x_120294 x_120316 x_120317)) (x_120295 x_120358 x_120359) (x_120294 x_120316 x_120317))))
(assert (forall ((x_120302 R_633) (x_120316 R_633) (x_120317 R_633) (x_120301 R_633) (x_120360 R_633) (x_120361 R_633) (x_120300 R_633) (x_120299 R_633))
	(x_120297 (x_120296 (x_120296 x_120360 x_120361) (x_120294 x_120316 x_120317)) (x_120296 x_120360 x_120361) (x_120294 x_120316 x_120317))))
(assert (forall ((x_120302 R_633) (x_120318 R_633) (x_120319 R_633) (x_120301 R_633) (x_120362 T_35) (x_120300 R_633) (x_120299 R_633))
	(x_120297 (x_120296 (Atom_45 x_120362) (x_120295 x_120318 x_120319)) (Atom_45 x_120362) (x_120295 x_120318 x_120319))))
(assert (forall ((x_120302 R_633) (x_120318 R_633) (x_120319 R_633) (x_120301 R_633) (x_120363 R_633) (x_120300 R_633) (x_120299 R_633))
	(x_120297 (x_120296 (Star_45 x_120363) (x_120295 x_120318 x_120319)) (Star_45 x_120363) (x_120295 x_120318 x_120319))))
(assert (forall ((x_120302 R_633) (x_120318 R_633) (x_120319 R_633) (x_120301 R_633) (x_120364 R_633) (x_120365 R_633) (x_120300 R_633) (x_120299 R_633))
	(x_120297 (x_120296 (x_120294 x_120364 x_120365) (x_120295 x_120318 x_120319)) (x_120294 x_120364 x_120365) (x_120295 x_120318 x_120319))))
(assert (forall ((x_120302 R_633) (x_120318 R_633) (x_120319 R_633) (x_120301 R_633) (x_120366 R_633) (x_120367 R_633) (x_120300 R_633) (x_120299 R_633))
	(x_120297 (x_120296 (x_120295 x_120366 x_120367) (x_120295 x_120318 x_120319)) (x_120295 x_120366 x_120367) (x_120295 x_120318 x_120319))))
(assert (forall ((x_120302 R_633) (x_120318 R_633) (x_120319 R_633) (x_120301 R_633) (x_120368 R_633) (x_120369 R_633) (x_120300 R_633) (x_120299 R_633))
	(x_120297 (x_120296 (x_120296 x_120368 x_120369) (x_120295 x_120318 x_120319)) (x_120296 x_120368 x_120369) (x_120295 x_120318 x_120319))))
(assert (forall ((x_120302 R_633) (x_120320 R_633) (x_120321 R_633) (x_120301 R_633) (x_120370 T_35) (x_120300 R_633) (x_120299 R_633))
	(x_120297 (x_120296 (Atom_45 x_120370) (x_120296 x_120320 x_120321)) (Atom_45 x_120370) (x_120296 x_120320 x_120321))))
(assert (forall ((x_120302 R_633) (x_120320 R_633) (x_120321 R_633) (x_120301 R_633) (x_120371 R_633) (x_120300 R_633) (x_120299 R_633))
	(x_120297 (x_120296 (Star_45 x_120371) (x_120296 x_120320 x_120321)) (Star_45 x_120371) (x_120296 x_120320 x_120321))))
(assert (forall ((x_120302 R_633) (x_120320 R_633) (x_120321 R_633) (x_120301 R_633) (x_120372 R_633) (x_120373 R_633) (x_120300 R_633) (x_120299 R_633))
	(x_120297 (x_120296 (x_120294 x_120372 x_120373) (x_120296 x_120320 x_120321)) (x_120294 x_120372 x_120373) (x_120296 x_120320 x_120321))))
(assert (forall ((x_120302 R_633) (x_120320 R_633) (x_120321 R_633) (x_120301 R_633) (x_120374 R_633) (x_120375 R_633) (x_120300 R_633) (x_120299 R_633))
	(x_120297 (x_120296 (x_120295 x_120374 x_120375) (x_120296 x_120320 x_120321)) (x_120295 x_120374 x_120375) (x_120296 x_120320 x_120321))))
(assert (forall ((x_120302 R_633) (x_120320 R_633) (x_120321 R_633) (x_120301 R_633) (x_120376 R_633) (x_120377 R_633) (x_120300 R_633) (x_120299 R_633))
	(x_120297 (x_120296 (x_120296 x_120376 x_120377) (x_120296 x_120320 x_120321)) (x_120296 x_120376 x_120377) (x_120296 x_120320 x_120321))))
(declare-fun x_120303 (R_633 R_633 R_633) Bool)
(assert (forall ((x_124478 R_633))
	(x_120303 x_124478 Nil_436 x_124478)))
(assert (forall ((x_120305 R_633) (x_122802 T_35))
	(x_120303 (Atom_45 x_122802) (Atom_45 x_122802) Nil_436)))
(assert (forall ((x_120305 R_633))
	(x_120303 Eps_90 Eps_90 Nil_436)))
(assert (forall ((x_120305 R_633) (x_122803 R_633))
	(x_120303 (Star_45 x_122803) (Star_45 x_122803) Nil_436)))
(assert (forall ((x_120305 R_633) (x_122804 R_633) (x_122805 R_633))
	(x_120303 (x_120294 x_122804 x_122805) (x_120294 x_122804 x_122805) Nil_436)))
(assert (forall ((x_120305 R_633) (x_122806 R_633) (x_122807 R_633))
	(x_120303 (x_120295 x_122806 x_122807) (x_120295 x_122806 x_122807) Nil_436)))
(assert (forall ((x_120305 R_633) (x_122808 R_633) (x_122809 R_633))
	(x_120303 (x_120296 x_122808 x_122809) (x_120296 x_122808 x_122809) Nil_436)))
(assert (forall ((x_120306 R_633) (x_122794 T_35) (x_120305 R_633) (x_122810 T_35))
	(x_120303 (x_120294 (Atom_45 x_122810) (Atom_45 x_122794)) (Atom_45 x_122810) (Atom_45 x_122794))))
(assert (forall ((x_120306 R_633) (x_122794 T_35) (x_120305 R_633))
	(x_120303 (x_120294 Eps_90 (Atom_45 x_122794)) Eps_90 (Atom_45 x_122794))))
(assert (forall ((x_120306 R_633) (x_122794 T_35) (x_120305 R_633) (x_122811 R_633))
	(x_120303 (x_120294 (Star_45 x_122811) (Atom_45 x_122794)) (Star_45 x_122811) (Atom_45 x_122794))))
(assert (forall ((x_120306 R_633) (x_122794 T_35) (x_120305 R_633) (x_122812 R_633) (x_122813 R_633))
	(x_120303 (x_120294 (x_120294 x_122812 x_122813) (Atom_45 x_122794)) (x_120294 x_122812 x_122813) (Atom_45 x_122794))))
(assert (forall ((x_120306 R_633) (x_122794 T_35) (x_120305 R_633) (x_122814 R_633) (x_122815 R_633))
	(x_120303 (x_120294 (x_120295 x_122814 x_122815) (Atom_45 x_122794)) (x_120295 x_122814 x_122815) (Atom_45 x_122794))))
(assert (forall ((x_120306 R_633) (x_122794 T_35) (x_120305 R_633) (x_122816 R_633) (x_122817 R_633))
	(x_120303 (x_120294 (x_120296 x_122816 x_122817) (Atom_45 x_122794)) (x_120296 x_122816 x_122817) (Atom_45 x_122794))))
(assert (forall ((x_120306 R_633) (x_120305 R_633) (x_122818 T_35))
	(x_120303 (x_120294 (Atom_45 x_122818) Eps_90) (Atom_45 x_122818) Eps_90)))
(assert (forall ((x_120306 R_633) (x_120305 R_633))
	(x_120303 (x_120294 Eps_90 Eps_90) Eps_90 Eps_90)))
(assert (forall ((x_120306 R_633) (x_120305 R_633) (x_122819 R_633))
	(x_120303 (x_120294 (Star_45 x_122819) Eps_90) (Star_45 x_122819) Eps_90)))
(assert (forall ((x_120306 R_633) (x_120305 R_633) (x_122820 R_633) (x_122821 R_633))
	(x_120303 (x_120294 (x_120294 x_122820 x_122821) Eps_90) (x_120294 x_122820 x_122821) Eps_90)))
(assert (forall ((x_120306 R_633) (x_120305 R_633) (x_122822 R_633) (x_122823 R_633))
	(x_120303 (x_120294 (x_120295 x_122822 x_122823) Eps_90) (x_120295 x_122822 x_122823) Eps_90)))
(assert (forall ((x_120306 R_633) (x_120305 R_633) (x_122824 R_633) (x_122825 R_633))
	(x_120303 (x_120294 (x_120296 x_122824 x_122825) Eps_90) (x_120296 x_122824 x_122825) Eps_90)))
(assert (forall ((x_120306 R_633) (x_122795 R_633) (x_120305 R_633) (x_122826 T_35))
	(x_120303 (x_120294 (Atom_45 x_122826) (Star_45 x_122795)) (Atom_45 x_122826) (Star_45 x_122795))))
(assert (forall ((x_120306 R_633) (x_122795 R_633) (x_120305 R_633))
	(x_120303 (x_120294 Eps_90 (Star_45 x_122795)) Eps_90 (Star_45 x_122795))))
(assert (forall ((x_120306 R_633) (x_122795 R_633) (x_120305 R_633) (x_122827 R_633))
	(x_120303 (x_120294 (Star_45 x_122827) (Star_45 x_122795)) (Star_45 x_122827) (Star_45 x_122795))))
(assert (forall ((x_120306 R_633) (x_122795 R_633) (x_120305 R_633) (x_122828 R_633) (x_122829 R_633))
	(x_120303 (x_120294 (x_120294 x_122828 x_122829) (Star_45 x_122795)) (x_120294 x_122828 x_122829) (Star_45 x_122795))))
(assert (forall ((x_120306 R_633) (x_122795 R_633) (x_120305 R_633) (x_122830 R_633) (x_122831 R_633))
	(x_120303 (x_120294 (x_120295 x_122830 x_122831) (Star_45 x_122795)) (x_120295 x_122830 x_122831) (Star_45 x_122795))))
(assert (forall ((x_120306 R_633) (x_122795 R_633) (x_120305 R_633) (x_122832 R_633) (x_122833 R_633))
	(x_120303 (x_120294 (x_120296 x_122832 x_122833) (Star_45 x_122795)) (x_120296 x_122832 x_122833) (Star_45 x_122795))))
(assert (forall ((x_120306 R_633) (x_122796 R_633) (x_122797 R_633) (x_120305 R_633) (x_122834 T_35))
	(x_120303 (x_120294 (Atom_45 x_122834) (x_120294 x_122796 x_122797)) (Atom_45 x_122834) (x_120294 x_122796 x_122797))))
(assert (forall ((x_120306 R_633) (x_122796 R_633) (x_122797 R_633) (x_120305 R_633))
	(x_120303 (x_120294 Eps_90 (x_120294 x_122796 x_122797)) Eps_90 (x_120294 x_122796 x_122797))))
(assert (forall ((x_120306 R_633) (x_122796 R_633) (x_122797 R_633) (x_120305 R_633) (x_122835 R_633))
	(x_120303 (x_120294 (Star_45 x_122835) (x_120294 x_122796 x_122797)) (Star_45 x_122835) (x_120294 x_122796 x_122797))))
(assert (forall ((x_120306 R_633) (x_122796 R_633) (x_122797 R_633) (x_120305 R_633) (x_122836 R_633) (x_122837 R_633))
	(x_120303 (x_120294 (x_120294 x_122836 x_122837) (x_120294 x_122796 x_122797)) (x_120294 x_122836 x_122837) (x_120294 x_122796 x_122797))))
(assert (forall ((x_120306 R_633) (x_122796 R_633) (x_122797 R_633) (x_120305 R_633) (x_122838 R_633) (x_122839 R_633))
	(x_120303 (x_120294 (x_120295 x_122838 x_122839) (x_120294 x_122796 x_122797)) (x_120295 x_122838 x_122839) (x_120294 x_122796 x_122797))))
(assert (forall ((x_120306 R_633) (x_122796 R_633) (x_122797 R_633) (x_120305 R_633) (x_122840 R_633) (x_122841 R_633))
	(x_120303 (x_120294 (x_120296 x_122840 x_122841) (x_120294 x_122796 x_122797)) (x_120296 x_122840 x_122841) (x_120294 x_122796 x_122797))))
(assert (forall ((x_120306 R_633) (x_122798 R_633) (x_122799 R_633) (x_120305 R_633) (x_122842 T_35))
	(x_120303 (x_120294 (Atom_45 x_122842) (x_120295 x_122798 x_122799)) (Atom_45 x_122842) (x_120295 x_122798 x_122799))))
(assert (forall ((x_120306 R_633) (x_122798 R_633) (x_122799 R_633) (x_120305 R_633))
	(x_120303 (x_120294 Eps_90 (x_120295 x_122798 x_122799)) Eps_90 (x_120295 x_122798 x_122799))))
(assert (forall ((x_120306 R_633) (x_122798 R_633) (x_122799 R_633) (x_120305 R_633) (x_122843 R_633))
	(x_120303 (x_120294 (Star_45 x_122843) (x_120295 x_122798 x_122799)) (Star_45 x_122843) (x_120295 x_122798 x_122799))))
(assert (forall ((x_120306 R_633) (x_122798 R_633) (x_122799 R_633) (x_120305 R_633) (x_122844 R_633) (x_122845 R_633))
	(x_120303 (x_120294 (x_120294 x_122844 x_122845) (x_120295 x_122798 x_122799)) (x_120294 x_122844 x_122845) (x_120295 x_122798 x_122799))))
(assert (forall ((x_120306 R_633) (x_122798 R_633) (x_122799 R_633) (x_120305 R_633) (x_122846 R_633) (x_122847 R_633))
	(x_120303 (x_120294 (x_120295 x_122846 x_122847) (x_120295 x_122798 x_122799)) (x_120295 x_122846 x_122847) (x_120295 x_122798 x_122799))))
(assert (forall ((x_120306 R_633) (x_122798 R_633) (x_122799 R_633) (x_120305 R_633) (x_122848 R_633) (x_122849 R_633))
	(x_120303 (x_120294 (x_120296 x_122848 x_122849) (x_120295 x_122798 x_122799)) (x_120296 x_122848 x_122849) (x_120295 x_122798 x_122799))))
(assert (forall ((x_120306 R_633) (x_122800 R_633) (x_122801 R_633) (x_120305 R_633) (x_122850 T_35))
	(x_120303 (x_120294 (Atom_45 x_122850) (x_120296 x_122800 x_122801)) (Atom_45 x_122850) (x_120296 x_122800 x_122801))))
(assert (forall ((x_120306 R_633) (x_122800 R_633) (x_122801 R_633) (x_120305 R_633))
	(x_120303 (x_120294 Eps_90 (x_120296 x_122800 x_122801)) Eps_90 (x_120296 x_122800 x_122801))))
(assert (forall ((x_120306 R_633) (x_122800 R_633) (x_122801 R_633) (x_120305 R_633) (x_122851 R_633))
	(x_120303 (x_120294 (Star_45 x_122851) (x_120296 x_122800 x_122801)) (Star_45 x_122851) (x_120296 x_122800 x_122801))))
(assert (forall ((x_120306 R_633) (x_122800 R_633) (x_122801 R_633) (x_120305 R_633) (x_122852 R_633) (x_122853 R_633))
	(x_120303 (x_120294 (x_120294 x_122852 x_122853) (x_120296 x_122800 x_122801)) (x_120294 x_122852 x_122853) (x_120296 x_122800 x_122801))))
(assert (forall ((x_120306 R_633) (x_122800 R_633) (x_122801 R_633) (x_120305 R_633) (x_122854 R_633) (x_122855 R_633))
	(x_120303 (x_120294 (x_120295 x_122854 x_122855) (x_120296 x_122800 x_122801)) (x_120295 x_122854 x_122855) (x_120296 x_122800 x_122801))))
(assert (forall ((x_120306 R_633) (x_122800 R_633) (x_122801 R_633) (x_120305 R_633) (x_122856 R_633) (x_122857 R_633))
	(x_120303 (x_120294 (x_120296 x_122856 x_122857) (x_120296 x_122800 x_122801)) (x_120296 x_122856 x_122857) (x_120296 x_122800 x_122801))))
(declare-fun eps_91 (Bool_432 R_633) Bool)
(assert (forall ((y_3135 R_633))
	(eps_91 true_432 (Star_45 y_3135))))
(assert (forall ((x_124522 Bool_432) (x_124523 Bool_432) (x_124524 Bool_432) (p_579 R_633) (q_347 R_633))
	(=> (and (eps_91 x_124523 p_579) (eps_91 x_124524 q_347) (and_438 x_124522 x_124523 x_124524)) (eps_91 x_124522 (x_120296 p_579 q_347)))))
(assert (forall ((x_124525 Bool_432) (x_124526 Bool_432) (x_124527 Bool_432) (r_634 R_633) (q_348 R_633))
	(=> (and (eps_91 x_124526 r_634) (eps_91 x_124527 q_348) (and_438 x_124525 x_124526 x_124527)) (eps_91 x_124525 (x_120295 r_634 q_348)))))
(assert (forall ((x_124528 Bool_432) (x_124529 Bool_432) (x_124530 Bool_432) (p_580 R_633) (q_349 R_633))
	(=> (and (eps_91 x_124529 p_580) (eps_91 x_124530 q_349) (or_449 x_124528 x_124529 x_124530)) (eps_91 x_124528 (x_120294 p_580 q_349)))))
(assert (eps_91 true_432 Eps_90))
(assert (forall ((x_120308 R_633) (x_122858 T_35))
	(eps_91 false_432 (Atom_45 x_122858))))
(assert (forall ((x_120308 R_633))
	(eps_91 false_432 Nil_436)))
(declare-fun step_45 (R_633 R_633 T_35) Bool)
(assert (forall ((x_124534 R_633) (x_124535 R_633) (p_581 R_633) (y_3136 T_35))
	(=> (and (step_45 x_124535 p_581 y_3136) (x_120297 x_124534 x_124535 (Star_45 p_581))) (step_45 x_124534 (Star_45 p_581) y_3136))))
(assert (forall ((x_124538 R_633) (x_124539 R_633) (x_124540 R_633) (x_124541 R_633) (p_582 R_633) (q_350 R_633) (y_3136 T_35))
	(=> (and (step_45 x_124539 p_582 y_3136) (x_120297 x_124540 x_124539 q_350) (step_45 x_124541 q_350 y_3136) (x_120303 x_124538 x_124540 x_124541) (eps_91 true_432 p_582)) (step_45 x_124538 (x_120296 p_582 q_350) y_3136))))
(assert (forall ((x_124544 R_633) (x_124545 R_633) (x_124546 R_633) (p_582 R_633) (q_350 R_633) (y_3136 T_35))
	(=> (and (step_45 x_124545 p_582 y_3136) (x_120297 x_124546 x_124545 q_350) (x_120303 x_124544 x_124546 Nil_436) (eps_91 false_432 p_582)) (step_45 x_124544 (x_120296 p_582 q_350) y_3136))))
(assert (forall ((r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (step_45 Nil_436 r_635 y_3136) (step_45 Nil_436 (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120310 R_633) (x_122867 T_35) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 Nil_436 q_351 y_3136) (step_45 (Atom_45 x_122867) r_635 y_3136)) (step_45 Nil_436 (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120310 R_633) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 Nil_436 q_351 y_3136) (step_45 Eps_90 r_635 y_3136)) (step_45 Nil_436 (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120310 R_633) (x_122868 R_633) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 Nil_436 q_351 y_3136) (step_45 (Star_45 x_122868) r_635 y_3136)) (step_45 Nil_436 (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120310 R_633) (x_122869 R_633) (x_122870 R_633) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 Nil_436 q_351 y_3136) (step_45 (x_120294 x_122869 x_122870) r_635 y_3136)) (step_45 Nil_436 (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120310 R_633) (x_122871 R_633) (x_122872 R_633) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 Nil_436 q_351 y_3136) (step_45 (x_120295 x_122871 x_122872) r_635 y_3136)) (step_45 Nil_436 (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120310 R_633) (x_122873 R_633) (x_122874 R_633) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 Nil_436 q_351 y_3136) (step_45 (x_120296 x_122873 x_122874) r_635 y_3136)) (step_45 Nil_436 (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_122859 T_35) (x_120310 R_633) (x_122875 T_35) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 (Atom_45 x_122859) q_351 y_3136) (step_45 (Atom_45 x_122875) r_635 y_3136)) (step_45 (x_120295 (Atom_45 x_122875) (Atom_45 x_122859)) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_122859 T_35) (x_120310 R_633) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 (Atom_45 x_122859) q_351 y_3136) (step_45 Eps_90 r_635 y_3136)) (step_45 (x_120295 Eps_90 (Atom_45 x_122859)) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_122859 T_35) (x_120310 R_633) (x_122876 R_633) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 (Atom_45 x_122859) q_351 y_3136) (step_45 (Star_45 x_122876) r_635 y_3136)) (step_45 (x_120295 (Star_45 x_122876) (Atom_45 x_122859)) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_122859 T_35) (x_120310 R_633) (x_122877 R_633) (x_122878 R_633) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 (Atom_45 x_122859) q_351 y_3136) (step_45 (x_120294 x_122877 x_122878) r_635 y_3136)) (step_45 (x_120295 (x_120294 x_122877 x_122878) (Atom_45 x_122859)) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_122859 T_35) (x_120310 R_633) (x_122879 R_633) (x_122880 R_633) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 (Atom_45 x_122859) q_351 y_3136) (step_45 (x_120295 x_122879 x_122880) r_635 y_3136)) (step_45 (x_120295 (x_120295 x_122879 x_122880) (Atom_45 x_122859)) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_122859 T_35) (x_120310 R_633) (x_122881 R_633) (x_122882 R_633) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 (Atom_45 x_122859) q_351 y_3136) (step_45 (x_120296 x_122881 x_122882) r_635 y_3136)) (step_45 (x_120295 (x_120296 x_122881 x_122882) (Atom_45 x_122859)) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_120310 R_633) (x_122883 T_35) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 Eps_90 q_351 y_3136) (step_45 (Atom_45 x_122883) r_635 y_3136)) (step_45 (x_120295 (Atom_45 x_122883) Eps_90) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_120310 R_633) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 Eps_90 q_351 y_3136) (step_45 Eps_90 r_635 y_3136)) (step_45 (x_120295 Eps_90 Eps_90) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_120310 R_633) (x_122884 R_633) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 Eps_90 q_351 y_3136) (step_45 (Star_45 x_122884) r_635 y_3136)) (step_45 (x_120295 (Star_45 x_122884) Eps_90) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_120310 R_633) (x_122885 R_633) (x_122886 R_633) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 Eps_90 q_351 y_3136) (step_45 (x_120294 x_122885 x_122886) r_635 y_3136)) (step_45 (x_120295 (x_120294 x_122885 x_122886) Eps_90) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_120310 R_633) (x_122887 R_633) (x_122888 R_633) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 Eps_90 q_351 y_3136) (step_45 (x_120295 x_122887 x_122888) r_635 y_3136)) (step_45 (x_120295 (x_120295 x_122887 x_122888) Eps_90) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_120310 R_633) (x_122889 R_633) (x_122890 R_633) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 Eps_90 q_351 y_3136) (step_45 (x_120296 x_122889 x_122890) r_635 y_3136)) (step_45 (x_120295 (x_120296 x_122889 x_122890) Eps_90) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_122860 R_633) (x_120310 R_633) (x_122891 T_35) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 (Star_45 x_122860) q_351 y_3136) (step_45 (Atom_45 x_122891) r_635 y_3136)) (step_45 (x_120295 (Atom_45 x_122891) (Star_45 x_122860)) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_122860 R_633) (x_120310 R_633) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 (Star_45 x_122860) q_351 y_3136) (step_45 Eps_90 r_635 y_3136)) (step_45 (x_120295 Eps_90 (Star_45 x_122860)) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_122860 R_633) (x_120310 R_633) (x_122892 R_633) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 (Star_45 x_122860) q_351 y_3136) (step_45 (Star_45 x_122892) r_635 y_3136)) (step_45 (x_120295 (Star_45 x_122892) (Star_45 x_122860)) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_122860 R_633) (x_120310 R_633) (x_122893 R_633) (x_122894 R_633) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 (Star_45 x_122860) q_351 y_3136) (step_45 (x_120294 x_122893 x_122894) r_635 y_3136)) (step_45 (x_120295 (x_120294 x_122893 x_122894) (Star_45 x_122860)) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_122860 R_633) (x_120310 R_633) (x_122895 R_633) (x_122896 R_633) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 (Star_45 x_122860) q_351 y_3136) (step_45 (x_120295 x_122895 x_122896) r_635 y_3136)) (step_45 (x_120295 (x_120295 x_122895 x_122896) (Star_45 x_122860)) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_122860 R_633) (x_120310 R_633) (x_122897 R_633) (x_122898 R_633) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 (Star_45 x_122860) q_351 y_3136) (step_45 (x_120296 x_122897 x_122898) r_635 y_3136)) (step_45 (x_120295 (x_120296 x_122897 x_122898) (Star_45 x_122860)) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_122861 R_633) (x_122862 R_633) (x_120310 R_633) (x_122899 T_35) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 (x_120294 x_122861 x_122862) q_351 y_3136) (step_45 (Atom_45 x_122899) r_635 y_3136)) (step_45 (x_120295 (Atom_45 x_122899) (x_120294 x_122861 x_122862)) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_122861 R_633) (x_122862 R_633) (x_120310 R_633) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 (x_120294 x_122861 x_122862) q_351 y_3136) (step_45 Eps_90 r_635 y_3136)) (step_45 (x_120295 Eps_90 (x_120294 x_122861 x_122862)) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_122861 R_633) (x_122862 R_633) (x_120310 R_633) (x_122900 R_633) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 (x_120294 x_122861 x_122862) q_351 y_3136) (step_45 (Star_45 x_122900) r_635 y_3136)) (step_45 (x_120295 (Star_45 x_122900) (x_120294 x_122861 x_122862)) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_122861 R_633) (x_122862 R_633) (x_120310 R_633) (x_122901 R_633) (x_122902 R_633) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 (x_120294 x_122861 x_122862) q_351 y_3136) (step_45 (x_120294 x_122901 x_122902) r_635 y_3136)) (step_45 (x_120295 (x_120294 x_122901 x_122902) (x_120294 x_122861 x_122862)) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_122861 R_633) (x_122862 R_633) (x_120310 R_633) (x_122903 R_633) (x_122904 R_633) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 (x_120294 x_122861 x_122862) q_351 y_3136) (step_45 (x_120295 x_122903 x_122904) r_635 y_3136)) (step_45 (x_120295 (x_120295 x_122903 x_122904) (x_120294 x_122861 x_122862)) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_122861 R_633) (x_122862 R_633) (x_120310 R_633) (x_122905 R_633) (x_122906 R_633) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 (x_120294 x_122861 x_122862) q_351 y_3136) (step_45 (x_120296 x_122905 x_122906) r_635 y_3136)) (step_45 (x_120295 (x_120296 x_122905 x_122906) (x_120294 x_122861 x_122862)) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_122863 R_633) (x_122864 R_633) (x_120310 R_633) (x_122907 T_35) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 (x_120295 x_122863 x_122864) q_351 y_3136) (step_45 (Atom_45 x_122907) r_635 y_3136)) (step_45 (x_120295 (Atom_45 x_122907) (x_120295 x_122863 x_122864)) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_122863 R_633) (x_122864 R_633) (x_120310 R_633) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 (x_120295 x_122863 x_122864) q_351 y_3136) (step_45 Eps_90 r_635 y_3136)) (step_45 (x_120295 Eps_90 (x_120295 x_122863 x_122864)) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_122863 R_633) (x_122864 R_633) (x_120310 R_633) (x_122908 R_633) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 (x_120295 x_122863 x_122864) q_351 y_3136) (step_45 (Star_45 x_122908) r_635 y_3136)) (step_45 (x_120295 (Star_45 x_122908) (x_120295 x_122863 x_122864)) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_122863 R_633) (x_122864 R_633) (x_120310 R_633) (x_122909 R_633) (x_122910 R_633) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 (x_120295 x_122863 x_122864) q_351 y_3136) (step_45 (x_120294 x_122909 x_122910) r_635 y_3136)) (step_45 (x_120295 (x_120294 x_122909 x_122910) (x_120295 x_122863 x_122864)) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_122863 R_633) (x_122864 R_633) (x_120310 R_633) (x_122911 R_633) (x_122912 R_633) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 (x_120295 x_122863 x_122864) q_351 y_3136) (step_45 (x_120295 x_122911 x_122912) r_635 y_3136)) (step_45 (x_120295 (x_120295 x_122911 x_122912) (x_120295 x_122863 x_122864)) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_122863 R_633) (x_122864 R_633) (x_120310 R_633) (x_122913 R_633) (x_122914 R_633) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 (x_120295 x_122863 x_122864) q_351 y_3136) (step_45 (x_120296 x_122913 x_122914) r_635 y_3136)) (step_45 (x_120295 (x_120296 x_122913 x_122914) (x_120295 x_122863 x_122864)) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_122865 R_633) (x_122866 R_633) (x_120310 R_633) (x_122915 T_35) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 (x_120296 x_122865 x_122866) q_351 y_3136) (step_45 (Atom_45 x_122915) r_635 y_3136)) (step_45 (x_120295 (Atom_45 x_122915) (x_120296 x_122865 x_122866)) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_122865 R_633) (x_122866 R_633) (x_120310 R_633) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 (x_120296 x_122865 x_122866) q_351 y_3136) (step_45 Eps_90 r_635 y_3136)) (step_45 (x_120295 Eps_90 (x_120296 x_122865 x_122866)) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_122865 R_633) (x_122866 R_633) (x_120310 R_633) (x_122916 R_633) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 (x_120296 x_122865 x_122866) q_351 y_3136) (step_45 (Star_45 x_122916) r_635 y_3136)) (step_45 (x_120295 (Star_45 x_122916) (x_120296 x_122865 x_122866)) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_122865 R_633) (x_122866 R_633) (x_120310 R_633) (x_122917 R_633) (x_122918 R_633) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 (x_120296 x_122865 x_122866) q_351 y_3136) (step_45 (x_120294 x_122917 x_122918) r_635 y_3136)) (step_45 (x_120295 (x_120294 x_122917 x_122918) (x_120296 x_122865 x_122866)) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_122865 R_633) (x_122866 R_633) (x_120310 R_633) (x_122919 R_633) (x_122920 R_633) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 (x_120296 x_122865 x_122866) q_351 y_3136) (step_45 (x_120295 x_122919 x_122920) r_635 y_3136)) (step_45 (x_120295 (x_120295 x_122919 x_122920) (x_120296 x_122865 x_122866)) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_120311 R_633) (x_122865 R_633) (x_122866 R_633) (x_120310 R_633) (x_122921 R_633) (x_122922 R_633) (r_635 R_633) (q_351 R_633) (y_3136 T_35))
	(=> (and (step_45 (x_120296 x_122865 x_122866) q_351 y_3136) (step_45 (x_120296 x_122921 x_122922) r_635 y_3136)) (step_45 (x_120295 (x_120296 x_122921 x_122922) (x_120296 x_122865 x_122866)) (x_120295 r_635 q_351) y_3136))))
(assert (forall ((x_124676 R_633) (x_124677 R_633) (x_124678 R_633) (p_583 R_633) (q_352 R_633) (y_3136 T_35))
	(=> (and (step_45 x_124677 p_583 y_3136) (step_45 x_124678 q_352 y_3136) (x_120303 x_124676 x_124677 x_124678)) (step_45 x_124676 (x_120294 p_583 q_352) y_3136))))
(assert (forall ((b_127 T_35))
	(step_45 Eps_90 (Atom_45 b_127) b_127)))
(assert (forall ((b_127 T_35) (y_3136 T_35))
	(=> (diseqT_31 b_127 y_3136) (step_45 Nil_436 (Atom_45 b_127) y_3136))))
(assert (forall ((x_120312 R_633) (y_3136 T_35))
	(step_45 Nil_436 Eps_90 y_3136)))
(assert (forall ((x_120312 R_633) (y_3136 T_35))
	(step_45 Nil_436 Nil_436 y_3136)))
(declare-fun rec_31 (Bool_432 R_633 list_380) Bool)
(assert (forall ((x_124684 Bool_432) (x_124685 R_633) (z_2686 T_35) (xs_873 list_380) (x_120313 R_633))
	(=> (and (step_45 x_124685 x_120313 z_2686) (rec_31 x_124684 x_124685 xs_873)) (rec_31 x_124684 x_120313 (cons_374 z_2686 xs_873)))))
(assert (forall ((x_124687 Bool_432) (x_120313 R_633))
	(=> (eps_91 x_124687 x_120313) (rec_31 x_124687 x_120313 nil_435))))
(assert (forall ((x_124689 Bool_432) (x_124690 Bool_432) (p_584 R_633) (q_353 R_633) (s_620 list_380))
	(=> (and true (diseqBool_215 x_124689 x_124690) (rec_31 x_124689 (x_120294 p_584 q_353) s_620) (rec_31 x_124690 (x_120296 p_584 q_353) s_620)) false)))
(check-sat)
