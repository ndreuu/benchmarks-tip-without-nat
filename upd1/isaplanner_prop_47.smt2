
(set-logic HORN)
(define-fun Z_383 () Int 0)
(define-fun S_136 ((x Int)) Int (+ x 1))
(define-fun Z_381 () Int 0)
(define-fun S_135 ((x Int)) Int (+ x 1))
(declare-fun diseqInt (Int Int) Bool)
(declare-fun unS_141 (Int Int) Bool)
(declare-fun isZ_136 (Int) Bool)
(declare-fun isS_136 (Int) Bool)
(assert (forall ((x_3723 Int))
	(unS_141 x_3723 (S_136 x_3723))))
(assert (isZ_136 Z_383))
(assert (forall ((x_3725 Int))
	(isS_136 (S_136 x_3725))))
(assert (forall ((x_3726 Int))
	(diseqInt Z_383 (S_136 x_3726))))
(assert (forall ((x_3727 Int))
	(diseqInt (S_136 x_3727) Z_383)))
(assert (forall ((x_3728 Int) (x_3729 Int))
	(=> (diseqInt x_3728 x_3729) (diseqInt (S_136 x_3728) (S_136 x_3729)))))
(declare-fun add_70 (Int Int Int) Bool)
(declare-fun minus_70 (Int Int Int) Bool)
(declare-fun le_70 (Int Int) Bool)
(declare-fun ge_70 (Int Int) Bool)
(declare-fun lt_70 (Int Int) Bool)
(declare-fun gt_70 (Int Int) Bool)
(declare-fun mult_70 (Int Int Int) Bool)
(declare-fun div_70 (Int Int Int) Bool)
(declare-fun mod_70 (Int Int Int) Bool)
(assert (forall ((y_303 Int))
	(add_70 y_303 Z_383 y_303)))
(assert (forall ((x_3693 Int) (y_303 Int) (r_72 Int))
	(=> (add_70 r_72 x_3693 y_303) (add_70 (S_136 r_72) (S_136 x_3693) y_303))))
(assert (forall ((y_303 Int))
	(minus_70 Z_383 Z_383 y_303)))
(assert (forall ((x_3693 Int) (y_303 Int) (r_72 Int))
	(=> (minus_70 r_72 x_3693 y_303) (minus_70 (S_136 r_72) (S_136 x_3693) y_303))))
(assert (forall ((y_303 Int))
	(le_70 Z_383 y_303)))
(assert (forall ((x_3693 Int) (y_303 Int))
	(=> (le_70 x_3693 y_303) (le_70 (S_136 x_3693) (S_136 y_303)))))
(assert (forall ((y_303 Int))
	(ge_70 y_303 Z_383)))
(assert (forall ((x_3693 Int) (y_303 Int))
	(=> (ge_70 x_3693 y_303) (ge_70 (S_136 x_3693) (S_136 y_303)))))
(assert (forall ((y_303 Int))
	(lt_70 Z_383 (S_136 y_303))))
(assert (forall ((x_3693 Int) (y_303 Int))
	(=> (lt_70 x_3693 y_303) (lt_70 (S_136 x_3693) (S_136 y_303)))))
(assert (forall ((y_303 Int))
	(gt_70 (S_136 y_303) Z_383)))
(assert (forall ((x_3693 Int) (y_303 Int))
	(=> (gt_70 x_3693 y_303) (gt_70 (S_136 x_3693) (S_136 y_303)))))
(assert (forall ((y_303 Int))
	(mult_70 Z_383 Z_383 y_303)))
(assert (forall ((x_3693 Int) (y_303 Int) (r_72 Int) (z_384 Int))
	(=> (and (mult_70 r_72 x_3693 y_303) (add_70 z_384 r_72 y_303)) (mult_70 z_384 (S_136 x_3693) y_303))))
(assert (forall ((x_3693 Int) (y_303 Int))
	(=> (lt_70 x_3693 y_303) (div_70 Z_383 x_3693 y_303))))
(assert (forall ((x_3693 Int) (y_303 Int) (r_72 Int) (z_384 Int))
	(=> (and (ge_70 x_3693 y_303) (minus_70 z_384 x_3693 y_303) (div_70 r_72 z_384 y_303)) (div_70 (S_136 r_72) x_3693 y_303))))
(assert (forall ((x_3693 Int) (y_303 Int))
	(=> (lt_70 x_3693 y_303) (mod_70 x_3693 x_3693 y_303))))
(assert (forall ((x_3693 Int) (y_303 Int) (r_72 Int) (z_384 Int))
	(=> (and (ge_70 x_3693 y_303) (minus_70 z_384 x_3693 y_303) (mod_70 r_72 z_384 y_303)) (mod_70 r_72 x_3693 y_303))))
(declare-datatypes ((Tree_0 0)) (((Leaf_0) (Node_0 (projNode_0 Tree_0) (projNode_1 Int) (projNode_2 Tree_0)))))
(declare-fun diseqTree_0 (Tree_0 Tree_0) Bool)
(declare-fun projNode_3 (Tree_0 Tree_0) Bool)
(declare-fun projNode_4 (Int Tree_0) Bool)
(declare-fun projNode_5 (Tree_0 Tree_0) Bool)
(declare-fun isLeaf_0 (Tree_0) Bool)
(declare-fun isNode_0 (Tree_0) Bool)
(assert (forall ((x_3695 Tree_0) (x_3696 Int) (x_3697 Tree_0))
	(projNode_3 x_3695 (Node_0 x_3695 x_3696 x_3697))))
(assert (forall ((x_3695 Tree_0) (x_3696 Int) (x_3697 Tree_0))
	(projNode_4 x_3696 (Node_0 x_3695 x_3696 x_3697))))
(assert (forall ((x_3695 Tree_0) (x_3696 Int) (x_3697 Tree_0))
	(projNode_5 x_3697 (Node_0 x_3695 x_3696 x_3697))))
(assert (isLeaf_0 Leaf_0))
(assert (forall ((x_3699 Tree_0) (x_3700 Int) (x_3701 Tree_0))
	(isNode_0 (Node_0 x_3699 x_3700 x_3701))))
(assert (forall ((x_3702 Tree_0) (x_3703 Int) (x_3704 Tree_0))
	(diseqTree_0 Leaf_0 (Node_0 x_3702 x_3703 x_3704))))
(assert (forall ((x_3705 Tree_0) (x_3706 Int) (x_3707 Tree_0))
	(diseqTree_0 (Node_0 x_3705 x_3706 x_3707) Leaf_0)))
(assert (forall ((x_3708 Tree_0) (x_3709 Int) (x_3710 Tree_0) (x_3711 Tree_0) (x_3712 Int) (x_3713 Tree_0))
	(=> (diseqTree_0 x_3708 x_3711) (diseqTree_0 (Node_0 x_3708 x_3709 x_3710) (Node_0 x_3711 x_3712 x_3713)))))
(assert (forall ((x_3708 Tree_0) (x_3709 Int) (x_3710 Tree_0) (x_3711 Tree_0) (x_3712 Int) (x_3713 Tree_0))
	(=> (diseqInt x_3709 x_3712) (diseqTree_0 (Node_0 x_3708 x_3709 x_3710) (Node_0 x_3711 x_3712 x_3713)))))
(assert (forall ((x_3708 Tree_0) (x_3709 Int) (x_3710 Tree_0) (x_3711 Tree_0) (x_3712 Int) (x_3713 Tree_0))
	(=> (diseqTree_0 x_3710 x_3713) (diseqTree_0 (Node_0 x_3708 x_3709 x_3710) (Node_0 x_3711 x_3712 x_3713)))))
(declare-fun diseqInt (Int Int) Bool)
(declare-fun projS_131 (Int Int) Bool)
(declare-fun isZ_135 (Int) Bool)
(declare-fun isS_135 (Int) Bool)
(assert (forall ((x_3715 Int))
	(projS_131 x_3715 (S_135 x_3715))))
(assert (isZ_135 Z_381))
(assert (forall ((x_3717 Int))
	(isS_135 (S_135 x_3717))))
(assert (forall ((x_3718 Int))
	(diseqInt Z_381 (S_135 x_3718))))
(assert (forall ((x_3719 Int))
	(diseqInt (S_135 x_3719) Z_381)))
(assert (forall ((x_3720 Int) (x_3721 Int))
	(=> (diseqInt x_3720 x_3721) (diseqInt (S_135 x_3720) (S_135 x_3721)))))
(declare-fun mirror_0 (Tree_0 Tree_0) Bool)
(assert (forall ((x_3678 Tree_0) (x_3679 Tree_0) (l_0 Tree_0) (y_300 Int) (r_70 Tree_0))
	(=> (and (mirror_0 x_3678 r_70) (mirror_0 x_3679 l_0)) (mirror_0 (Node_0 x_3678 y_300 x_3679) (Node_0 l_0 y_300 r_70)))))
(assert (mirror_0 Leaf_0 Leaf_0))
(declare-fun max_3 (Int Int Int) Bool)
(assert (forall ((x_3682 Int) (x_3675 Int) (z_382 Int))
	(=> (max_3 x_3682 z_382 x_3675) (max_3 (S_135 x_3682) (S_135 z_382) (S_135 x_3675)))))
(assert (forall ((z_382 Int))
	(max_3 (S_135 z_382) (S_135 z_382) Z_381)))
(assert (forall ((x_3684 Int))
	(max_3 x_3684 Z_381 x_3684)))
(declare-fun height_0 (Int Tree_0) Bool)
(assert (forall ((x_3686 Int) (x_3687 Int) (x_3688 Int) (l_1 Tree_0) (y_302 Int) (r_71 Tree_0))
	(=> (and (height_0 x_3686 l_1) (height_0 x_3687 r_71) (max_3 x_3688 x_3686 x_3687)) (height_0 (S_135 x_3688) (Node_0 l_1 y_302 r_71)))))
(assert (height_0 Z_381 Leaf_0))
(assert (forall ((x_3690 Tree_0) (x_3691 Int) (x_3692 Int) (a_6 Tree_0))
	(=> (and true (diseqInt x_3691 x_3692) (mirror_0 x_3690 a_6) (height_0 x_3691 x_3690) (height_0 x_3692 a_6)) false)))
(check-sat)
